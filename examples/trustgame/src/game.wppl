/**
Game structure
- we refer to the two players as *investor* and *investee*
- state consists of
  * turn: indicates whether next move is investing or returning
  * timeLeft: how many time steps are left in the game (-1 means infinite horizon)
  * investments: history of amounts sent by investor (most recent first)
  * returns: history of amounts sent by investee (most recent first)

  //* endowments: a dictionary {'investor': x, 'investee': y} specifying
    how much both players received in endowments in this stage

- we allow integer transfers not exceeding money available to player
- gameParams configure the game as follows:
  * investorEndowment: how much does investor get at the start of each round
  * investeeEndowment: how much does investee get at the start of each round
*/

/**
var params = {
  endowments : {
    investor: 0,
    investee: 0
  },
  k: 0,
  horizon: {
    investor: 0,
    investee: 0
  }
}

 horizon is optional. it's introduced to model con man behaviour.
 the idea is that if horizon is passed for one of the players, then
 this players assumes game ends after that many moves. note that
 horizon is specified in terms of rounds, not steps.
*/
let makeTrustCSMG = function(gameSpecificParams) {
  let endowments = assertDefined(gameSpecificParams.endowments,
    "makeTrustCSMG(): endowments undefined")
  let investorEndowment = assertDefined(endowments.investor,
    "makeTrustCSMG(): investorEndowment undefined")
  let investeeEndowment = assertDefined(endowments.investee,
    "makeTrustCSMG(): investeeEndowment undefined")
  let k = assertDefined(gameSpecificParams.k,
    "makeTrustCSMG(): k undefined")
  let horizon = gameSpecificParams.horizon
  /**********************************
   *     Some auxiliary functions   *
   * ********************************/

  /** Compute endowment of agents in a state
   * @param state
   * @param params
   * @returns {investor: number, investee: number}
   */
  let endowment = function(state) {
    if (state.turn === "investor") {
      return endowments
    }
    return {
      investor: 0,
      investee: state.investments[0]
    }
  }

  /** Computes the monetary transfer for each agent (positive or negative)
   * when *action* is taken in *state*
   * Params:
   *  - *state*
   *  - *action*
   * Returns
   *   an dictionary indexed by agent with money amount received (positive) or
   *   given away (negative)
   */
  let transfer = function(state, action) {
    let investor = action * ((state.turn == "investor") ? -1 : 1)
    return {
      'investor': investor,
      'investee': -investor
    }
  }

  /** Compute maximal possible amount that can be transferred from a given state */
  let maxPossibleTransfer = function(state) {
    return (state.turn == 'investor') ? investorEndowment :
      state.investments[0] * k
  }

  /** Game mechanics */
  let actions = function(state) {
    if (state.turn == 'investor') {
      return rangeArray(0, investorEndowment)
      // return [0,params.endowments.investor]
    }
    console.assert(state.investments.length > 0,
      "Investee turn, but no past investments recorded")
    return rangeArray(0, state.investments[0] * k)
  }

  let transitionFn = function(state, action) {
    info("transitionFn(state: " + stateToString(state) + ", action: " + action + ")")
    let turn = state.turn
    let nextTurn = (turn == 'investor') ? 'investee' : 'investor'
    let nextInvestments = (turn == 'investor') ?
      [action].concat(state.investments) : state.investments
    let nextReturns = (turn == 'investee') ?
      [action].concat(state.returns) : state.returns
    let result = {
      turn: nextTurn,
      investments: nextInvestments,
      returns: nextReturns
    }
    info("transitionFn(state: " + stateToString(state) + ", action: " + action + ")"
      + ": computed " + stateToString(result))
    return Delta({v: result})
  }

  let turn = function (state) {
    return (state.turn === 'investor') ? 0 : 1
  }

  let stateToString = function (state) {
    return "{invs: " + arrayToString(state.investments) +
      ", rets: " + arrayToString(state.returns) + "}"
  }

  /** Compulsory API of a game */
  let API = function() {
    let getPreviousState = function (state) {
      if (isInitial(state)) return state
      let prevTurn = (state.turn == 'investor') ? 'investee' : 'investor'
      // var prevTimeLeft = state.timeLeft + 1
      let prevInvestments = (prevTurn == 'investor') ? state.investments.slice(1) : state.investments
      let prevReturns = (prevTurn == 'investee') ? state.returns.slice(1) : state.returns
      return {
        turn: prevTurn,
        // timeLeft: prevTimeLeft,
        investments: prevInvestments,
        returns: prevReturns
      }
    }

    let getLastAction = function (state) {
      console.assert(!isInitial(state), "Calling previousAction on initial state")
      if (state.investments.length > state.returns.length)
        return state.investments[0]
      else
        return state.returns[0]
    }

    let endsRound = function(state, action) {
      return state.investments.length > state.returns.length
    }

    let isInitial = function (state) {
      return state.investments.length === 0 && state.returns.length === 0
    }

    let API = {
      getPreviousState,
      getLastAction,
      endsRound,
      isInitial,
      turn,
      stateToString
    }

    return API
  }()

  /** Physical rewards structure
   *  This is a relatively simple component which models state and
   *  action rewards that agents receive - these are the typical
   *  physical rewards familiar from other settings
   */
  let physicalRewardStructure = function() {

    let investorHorizon = (isDefined(horizon)) ? horizon.investor : undefined
    let investeeHorizon = (isDefined(horizon)) ? horizon.investee : undefined
    /** State rewards
     *
     * @param state
     * @returns {{investor: array[reward], investee: array[reward]}}
     */
    let stateRewards = function(state) {
      let endowments = endowment(state)
      let investor =
        (isDefined(investorHorizon) && state.returns.length >= investorHorizon) ?
          0 : endowments.investor
      let investee =
        (isDefined(investeeHorizon) && state.returns.length >= investeeHorizon) ?
          0 : endowments.investee
      return [
        [investor],
        [investee]
      ]
    }

    /** Action rewards
     *
     * @param state
     * @param action
     * @returns {{investor: array[number], investee: array[number]}}
     */
    let actionRewards = function(state, action) {
      let transfers = transfer(state, action)
      let investor =
        (isDefined(investorHorizon) && state.returns.length >= investorHorizon) ?
          0 : transfers.investor
      let investee =
        (isDefined(investeeHorizon) && state.returns.length >= investeeHorizon) ?
          0 : transfers.investee
      return [
        [investor],
        [investee]
      ]
    }

    return {
      actionRewards,
      stateRewards,
      quantity: 1
    }
  }()

  /** Mental state dynamics model
   *  It consists of two components:
   *  (i) Heuristics agents use to estimate mental state of their opponents.
   *    This should be specified as an array of update functions, one for each
   *    mental state. Each update function has
   *    @type (mentalStateValue, agent, state, action) -> newMentalStateValue
   *  (ii) Mental state computation, i.e. how can actual mental state of an
   *    agent be computed. Each such function that computes some mental state
   *    of an agent has
   *    @type (state, belief) -> mentalStateValue
   */
  let mentalStateDynamics = function() {
    let getLastAction = API.getLastAction
    let getPreviousState = API.getPreviousState
    let conman = isDefined(horizon) && isDefined(horizon.investee)

    /** updateTrustEstimation
     * captures the dynamics of how agent A estimates changes of their
     * opponent's (agent B's) trust upon A taking an action.
     * Eg, when alice makes her investment, bob's trust will change, but
     *
     *
     * @param trust {Double}  previous value of trust
     * @param estimatingAgentID {Int}
     *   identifies the agent who estimates trust value
     * @param estimatedAgentID {Int}
     *   identifies the agent whose trust is being estimated
     * @param state {Object}
     *
     * The idea behind the trust update is that trust increases
     * faster (in response to trustworthy actions) when it's low and
     * decreases faster (in response to untrustworthy actions) when
     * it's high.
     */
    let updateTrustEstimationU = function(trust, estimatingAgentID, estimatedAgentID, state) {
      let lastState = getPreviousState(state)
      let action = getLastAction(state)
      let maxPossibleTransfer = maxPossibleTransfer(lastState)
      let lastActionWasInvestment = turn(lastState) === 0
      /** no trust update if there was no choice for investee */
      if (maxPossibleTransfer === 0) return trust
      let actionProportion = action / maxPossibleTransfer

      /** special conman case */
      if (conman && estimatingAgentID === 1) {
        return lastActionWasInvestment ?
          conmanTrustChangeAfterInvestment(action, investorEndowment, trust) :
          conmanTrustChangeAfterReturn(actionProportion, trust)
      }

      /** trust of action-taker doesn't change  */
      if (turn(lastState) === estimatedAgentID) return trust

      let scale = Math.sqrt(1 / state.investments.length)
      let updateTrustProportionately = function(oldTrust, newTrust, scale) {
        return oldTrust + (newTrust - oldTrust) * scale
      }

      let lengthDiff = state.investments.length - state.returns.length
      let history = zip(arrayDrop(state.investments, lengthDiff), state.returns)
      let newTrust = turn(lastState) === 0 ?
        trustChangeAfterInvestment(action, investorEndowment, trust, history) :
        trustChangeAfterReturn(action, maxPossibleTransfer / 2, trust)
      return updateTrustProportionately(trust, newTrust, scale)
    }
    // let updateTrustEstimation = dp.cache(updateTrustEstimationU)
    let updateTrustEstimation = updateTrustEstimationU

    /** Compute agentID's trust toward the other agent */
    let computeTrust = function(agentID, belief, state) {
      let opponentID = otherAgentID(agentID)
      let individualBelief = retrieveBeliefOver(opponentID, belief)
      return goalCoeffExpectation(individualBelief, 1)
    }

    return {
      estimationHeuristicArr: [ updateTrustEstimation ],
      mentalStateArr: [ computeTrust ],
      mentalUtilities: [
        [(conman ? [0,1] : [1])], /** agent 0 */
        [[0]]  /** agent 1 */
      ]
    }
  }()


  let heuristics = function() {
    /** actionHeuristic
     * This captures how *estimatingAgent* estimates the probabilities of actions
     * of their opponent (*estimatedAgent*) based on a heuristic.
     * In this case, investee
     * assumes that investor's action will be proportional to investor's
     * trust towards investee.
     * On the other hand, investor assumes that investee's return will be
     * proportional to investor's trust towards investee.
     */
    let action = function() {
      let applies = function(state, estimatingAgentID, estimatedAgentID) {
        return true
      }

      let erf = function(y) {
        let x = Math.abs(y)
        let pow = function(a,b) {
          return Math.pow(a,b)
        }
        let a1 = 0.278393
        let a2 = 0.230389
        let a3 = 0.000972
        let a4 = 0.078108
        let res = 1 - 1 / pow(1 + a1*x + a2*pow(x,2) + a3*pow(x,3) + a4*pow(x,4), 4)
        return y > 0 ? res : -res
      }

      let pdf = function(x) {
        return Math.exp(Gaussian({mu: 0, sigma: 1}).score(x))
      }

      let cdf = function(x) {
        return 0.5 * (1 + erf(x / Math.sqrt(2)))
      }

      let skewedStandardGaussianDensity = function(alpha, action) {
        let density = pdf(action) * cdf(alpha * action) / cdf(0)
        return density
      }

      let skewedGaussianDensity = function(mu, sigma, alpha, action) {
        return skewedStandardGaussianDensity(alpha, (action - mu) / sigma) / sigma
      }

      let computeOpponentAction = function(estimatingAgentID, estimatedAgentID, action, state, getMentalState, getMentalEstimation) {
        info("actionHeuristic(" + estimatingAgentID + "," +
          estimatedAgentID + "," + action + ") called at state " + stateToString(state))
        assert(turn(state) === estimatedAgentID,
          "actionHeuristic(): it must be estimatedAgent's turn at state given, " +
          "but estimatedAgentID=" + estimatedAgentID + ", turn=" + turn(state))
        assert(estimatedAgentID !== estimatingAgentID,
          "actionHeuristic(): estimating and estimated agent IDs must be different; " +
          "found both=" + estimatedAgentID)
        if (turn(state) === 0) {
          // investee estimates investor's investment
          // get estimated trust of investor
          let trustEst = getMentalEstimation(state, estimatedAgentID, 0)
          let trustExp = expectation(trustEst)
          let sigma = 0.6
          let mu = trustExp * investorEndowment
          let score = Gaussian({mu, sigma}).score(action)
          return score
        }
        /** investor estimates investee's return (assumed
         * proportional to investor's trust)  */
        let trust = getMentalState(state, 0)
        // let sigma = 1
        assert(state.investments.length > 0,
          "actionHeuristic(): called in state " + stateToString(state) +
          " with investee's turn, hence expecting an investment to have occurred; " +
          "however, no investment is recorded")
        let investment = state.investments[0]
        let mu = Math.pow(trust, 0.5) * (investment + 1)
        let sigma = 1 + 2 / Math.PI * Math.atan(investment-1)
        let score = Math.log(skewedGaussianDensity(mu, sigma, -2 + 4*trust, action))
        return score
        // return score1(mu, sigma, -0.5 + trust, action)
        // let mu = trust * 2 * investment
        // let mu = Math.pow(trust, 0.6) * (investment + 1)
        // let sigmaNeg = Math.pow(1 - trust, 0.7)
        // let sigmaPos = investment * Math.pow(trust, 0.3)
        // let sigma = action > mu ? sigmaPos : sigmaNeg
        // let score = Gaussian({mu, sigma}).score(action)
        // return score
      }

      return {
        applies,
        computeOpponentAction
      }
    }()


    let belief = function() {
      /** does heuristic apply for updating belief of
        *agent* when *action* taken at state */
      let applies = function(state, action, agent) {
        // applies only when investor observes investee's return
        return turn(state) === 1 && agent === 0
      }

      let updateBelief = function(fullBelief, state, action) {
        let turn = turn(state)
        assert(turn === 1, "updateBeliefDirichlet in trust " +
          "game specification: expected to be called for investor at investee's " +
          "turn, but called on investor's turn")
        let max = maxPossibleTransfer(state)
        let prop = action / max
        let individualBelief = retrieveBeliefOver(turn, fullBelief)

        let updateBeliefDiscrete = function(indBeliefVal) {
          // beliefVal is a discrete distribution over goal coeff vectors
          let updatedBelief = Infer({method: 'enumerate'}, function () {
            let goalCoeffs = sample(indBeliefVal)
            let trustCoeff = goalCoeffs[1]
            factor(Math.abs(trustCoeff - prop))
            return goalCoeffs
          })
          return updatedBelief
        }

        let updateBeliefDirichlet = function(indBeliefVal) {
          let trustCoeffInc = Math.pow(prop, 0.8)
          assertBetween(trustCoeffInc, 0, 1, "updateBeliefDirichlet " +
            "in trust game spec: trustCoeffInc expected in [0,1]; found: " + trustCoeffInc)
          let inc = [2 - 2*trustCoeffInc, 2*trustCoeffInc]
          return map2(add, indBeliefVal, inc)
        }

        let appropriateFn = {
          'discrete': updateBeliefDiscrete,
          'dirichlet': updateBeliefDirichlet
        }[fullBelief.representation]
        let updatedIndBeliefVal = appropriateFn(individualBelief.value)
        let updatedBeliefVal = arrayReplace(fullBelief.value, turn, updatedIndBeliefVal)
        return {
          representation: fullBelief.representation,
          value: updatedBeliefVal
        }
      }

      return {
        applies,
        updateBelief
      }
    }()

    return {
      action,
      belief
    }
  }()


  let initialState = {
    turn: 'investor',
    investments: [],
    returns: []
  }

  let params = {
    numberOfAgents: 2,
    numberOfRewards: {
      physical: 1,
      mental: 1
    }
  }

  let rewardUtilityFunctions = function() {
    let moneyUtility = function(x) {
      return x
    }

    let trustUtility = function(x) {
      return 8 * x
    }

    return {
      physical: [moneyUtility],
      mental: [trustUtility]
    }
  }()

  return {
    actions,
    transitionFn,
    initialState,
    physicalRewardStructure,
    mentalStateDynamics,
    heuristics,
    rewardUtilityFunctions,
    API,
    params
  }
}

/** TRUST DYNAMICS MODEL BELOW */

/** trustChangeAfterInvestment
 * trust update following an investment might seem fairly straightforward -
 * the more you invest, the bigger the trust gets. However, there are some
 * caveats:
 * - same investment may lead to different trust change depending on prior trust
 * - previous behvaiour (i.e., returns) of the investee likely affect their
 *   expectations and hence, their trust changes
 *
 * We therefore devise the following model of trust dynamics:
 * The new estimation of trust is a weighted average of two updated trust values:
 *   (1) one computed based on the principle that investment (as a proportion of
 *   maximal possible investment) should be close, ideally slightly higher than
 *   investee's trust.
 *   (2) second computed based on previous behaviour of investee and their (deduced)
 *   expectations that stem from it
 * The weight is based on the amount of evidence for (2).
 * Below we describe in detail how (1), (2) and the weight is computed.
 *
 * (1) For a given investment level (measured on a 0-1 scale, relative to max possible
 *     investment), new trust can be represented as a function of
 *     old trust. The idea is to modify
 *     the identity function by adding a gaussian function to it. Gaussian
 *     has to be scaled appropriately and its peak is chosen to be slightly smaller
 *     that the investment (motivated by the fact that an ideal investment is
 *     one that's slightly higher than current trust).
 *
 * (2) Here we introduce the concept of 'niceness', which measures how nice an
 *     agent is. When applied to the investee, this boils down to aggregating their
 *     past returns. Here, we use exponential smoothing so that more recent returns
 *     matter more.
 *
 * @param history an array of [ investment, return ] tuples, most recent come first,
 *    but the latest investment is not included
 */
let trustChangeAfterInvestment = function(investment, investorEndowment, previousEstimate, history) {
  info("trustChangeAfterInvestment(" + investment + "," + investorEndowment + "," + previousEstimate + ")")
  let investProportion = investment / investorEndowment
  let newEstimate1 = trustChangeActionVsExpectation(investProportion, previousEstimate)

  let niceness = computeInvesteeNicenessAndCertainty(history)
  let theirNiceness = niceness.value
  // myNiceness is based on comparing this investment to previous investment
  let myNiceness = computeInvestorLastMoveNiceness(investment, history)
  // let myNiceness = history.length === 0 ? 0 : investment / (history[0][0] || 1)
  let newEstimate2 = trustChangeActionAsResponseToNiceness(theirNiceness, myNiceness, investorEndowment, previousEstimate)

  let certainty = niceness.certainty
  let newEstimate = newEstimate1 * (1 - certainty) + newEstimate2 * certainty
  return newEstimate
}

/** @param action expressed as a proportion, i.e. in [0,1] */
let trustChangeActionVsExpectation = function(action, oldTrust) {
  info("trustChangeActionVsExpectation(" + action + "," + oldTrust + ")")

  // currently use exp log curve rather than gaussian
  return expMinusExpCurveCrossingIdentity(action, oldTrust)

  let PEAK = 0.9
  let MAX_INCREASE = 0.25
  let MAX_DECREASE = 0.4
  let WINDOW = 0.2 + 0.5 * action

  /** a,b,c,d below are params of gaussian f(x) = a exp(-(x-b)^2 / 2c^2) + d */
  let b = 0
  let peakY = 0.4 * Math.sqrt(action)
  let d = - action + 1.2 // that realtionship to be confirmed
  let a = d + peakY
  let c = action === 0 ? 1 : action / (Math.sqrt(-2 * Math.log(d/a)))

  let gaussian = getGaussian(a,b,c,d)

  // new trust is f(oldTrust) where f is identity + gaussian
  let newTrustUnbounded = oldTrust + gaussian(oldTrust)
  let newTrust = Math.min(1, Math.max(0, newTrustUnbounded))
  return newTrust
}

/** This captures how investee's trust towards investor changes based on displayed niceness
 * below, we refer to investor as I/me, investee as they/their
 * @param r1 their niceness
 * @param r2 my niceness */
let trustChangeActionAsResponseToNiceness = function(r1, r2, investorEndowment, trust) {
  info("trustChangeActionAsResponseToNiceness(" + r1 + "," + r2 + "," + investorEndowment + "," + trust + ")")
  /** -1 means niceness couldn't be computed so skip */
  assert(r1 >= -1 && r1 <= 1, "trustChangeActionAsResponseToNiceness(): " +
    "r1 expected between 0 and 2; found: " + r1)
  assert(r2 >= -1 && r2 <= 1, "trustChangeActionAsResponseToNiceness(): " +
    "r2 expected between 0 and 2; found: " + r2)
  let auxInfo = "\nr1=" + r1 + "; r2=" + r2
  if (r2 < 0 && r1 >= 0) {
    // if he is nice and I'm not nice, his trust decreases
    // we know 0 < r1-r2 <= 2. we want b to be negative but increase in
    // magnitude as r1-r2 gets bigger and not exceed 0.5
    let b = (r1 - r2) / 4
    return expCurveForBCrossZero(-b, trust)
  }
  // r2 >= 0 || r1 < 0
  // i.e. either I was nice enough or he was not nice
  // the bigger b is, the further the curve is from y=x
  // (i.e. big trust increase)
  // hence we let b be proportional to r2-r1 (i.e., the difference
  // between my niceness and their niceness)
  // if i was not nicer than him, set b to nearly 0
  let b = r2 > r1 ? r2-r1 : 0.0001
  return expCurveForBCrossOne(b, trust)
}

let computeInvestorLastMoveNiceness = function(investment, history) {
  info("computeInvestorLastMoveNiceness(" + investment + ", " + arrayToString(history) + ")")
  if (history.length === 0)
    return 0
  // check if previous investment was 0
  let previousInvestment = history[0][0]
  if (previousInvestment === 0) {
    return investment > 0 ? 1 : 0
  }
  let niceness = (investment - previousInvestment) / 4
  assert(niceness >= -1 && niceness <= 1, "computeInvestorLastMoveNiceness(): " +
    "niceness expected between -1 and 1; found: " + niceness)
  return niceness
}

/** computes two things:
 * - niceness of investee (which is based on their past returning behaviour)
 * - certainty that computed niceness is accurate (depends on amount of history)
 *
 * @param history array of [investment, return] pairs
 * @returns [niceness, certainty] ([Int, Int])
 */
let computeInvesteeNicenessAndCertainty = function(history) {
  info("computeInvesteeNicenessAndCertainty(" + arrayToString(history) + ")")
  let SMOOTHING_FACTOR = 0.3
  let nonZeroPairs = filter(function(x) { return x[0] !== 0 || x[1] !== 0}, history)
  let numberOfData = nonZeroPairs.length
  if (numberOfData === 0) return { value: 0, certainty: 0}
  // this asymptotically approaches 1
  let value = reduceL(function (nicenessSoFar, el) {
    let invested = el[0]
    let returned = el[1]
    let nicenessThisRound = returned / invested - 1
    assert(nicenessThisRound >= -1 && nicenessThisRound <= 1,
      "computeInvesteeNicenessAndCertainty(): " +
      "nicenessThisRound expected between -1 and 1; found: " + nicenessThisRound)
    let updatedNiceness = (nicenessSoFar === -2) ? nicenessThisRound :
      SMOOTHING_FACTOR * nicenessThisRound + (1 - SMOOTHING_FACTOR) * nicenessSoFar
    return updatedNiceness
  }, -2, nonZeroPairs)
  assert(value >= -1 && value <= 1, "computeInvesteeNicenessAndCertainty(): " +
    "niceness expected between -1 and 1; found: " + value)
  // certainty depends on the number of data but also on the computed niceness
  // the more extreme (closer to 1/-1 niceness is, the more it will 'count')
  let atanCoeff = 1.2 / (Math.abs(value) + 0.2)
  let certainty = 2 / Math.PI * Math.atan(numberOfData / atanCoeff)
  return { value, certainty }
}

/** trustChangeAfterReturn
 * the idea is to pick a dynamics function based on the realtionship
 * between investment and return.
 * We distinguish the following cases:
 * (i) return exceeds investment by more than 1 - that's considered
 * a higher than expected
 * return and hence modeled with exp log curve. Such curve is
 * characterised by where it meets identity - this point is denoted
 * 'crossPoint' below and computed by a function f(x) = 3/x - 3/2. This
 * function is chosen as we require f()=1 and f(2)=0 and we
 * want it to decrease faster initially
 * (ii) proportion > 1.2 -
 * (iii) proportion < 1 - this is similar to previous case except
 * that we now use f(x) = x^2 to ensure decreasing faster first
 */
let trustChangeAfterReturn = function(returned, investment, previousEstimate) {
  assert(investment > 0, "trustChangeAfterReturn(): investment expected > 0; found: " + investment)
  let returnProportion = returned / investment
  assertBetween(returnProportion, 0, 2,
    "trustChangeAfterReturn(): returnProportion expected in " +
    "[0,2]; found: " + returnProportion)
  // determine the point where 'exp-minus-exp' curve crosses identity
  // if (returned === investment)
  //   return expCurveForBCrossOne(0.2, previousEstimate)
  let crossPoint = returned > investment ?
    // 1 + (investment + 1) / investment - returnProportion :
    1 - (1 - previousEstimate) * (returned - (investment + 1)) / investment :
    Math.pow(0.9 * returnProportion, 2)
  assertBetween(crossPoint, 0, 1,
    "trustChangeAfterReturn(): case high return, crossPoint=" + crossPoint)
  // return expLogCurveCrossingIdentity(crossPoint, previousEstimate)
  return expMinusExpCurveCrossingIdentity(crossPoint, previousEstimate)
}

/** This basically expresses a curve on [0,1] that starts (at x=0)
 * as (stretched-out) exponential above y=x identity line, crosses
 * y=x at x=crossPoint and then continues as logarithmic from
 * x=crossPoint until x=1.
 *
 * In particular, this function computes f(x) where f is a
 * (trust dynamics) function that
 * starts (at x=0) as f1(x) = exp(kx+l) (k and l depend on crossPoint)
 * then crossed y=x at x=crosspoint and then continues as
 * f2(x) = log(kx+l) (k and l depend on crossPoint but are different than above)
 * until x=1.
 * hence, overall,
 *      / f1 on [0,crossPoint]
 * f = |  id at crossPoint
 *     \  f2 on [crossPoint,1]
 * */
let expLogCurveCrossingIdentity = function(crossPoint, x) {
  let b = crossPoint
  let a = b/Math.E
  let c = b + Math.log(2-b)
  if (x <= b) {
    let k = 1/b
    let l = Math.log(a)
    let result = Math.exp(k * x + l)
    assertBetween(result, 0, 1,
      "expLogCurveCrossingIdentity(): returning " +
      result + "; expected between 0 and 1")
    return result
  }
  let k = Math.exp(b)
  let l = Math.exp(b) * (1-b)
  let result = Math.log(k * x + l)
  assertBetween(result, 0, 1,
    "expLogCurveCrossingIdentity(): returning " +
    result + "; expected between 0 and 1")
  return result
}

/** exp curve such that f(1) = 1 and f(0) = a+c, which is roughly
 * proportional to b, eg. for
 *    b | f(0)
 *  0.1 | 0.05
 *  0.5 | 0.21
 *  1.0 | 0.37
 *  2.0 | 0.56
 *  5.0 | 0.8
 *   10 | 0.9
 * */
let expCurveForBCrossOne = function(b, x) {
  assert(b > 0,
    "expCurveForBCrossOne(): expected b > 0; found b=" + b)
  let a = 1 / (b * Math.exp(b))
  let c = 1 - a * Math.exp(b)
  return a * Math.exp(b * x) + c
}

/** exp curve such that f(0) = 0 and f(1) = exp(b), eg. for
 *   -b | f(0)
 *  0.1 | 0.90
 *  0.2 | 0.82
 *  0.3 | 0.74
 *  0.4 | 0.67
 *  0.5 | 0.6
 *  1.0 | 0.36
 * !!b should be negative!! and it should probably be kept under 0.5
 * */
let expCurveForBCrossZero = function(b,x) {
  assert(b < 0,
    "expCurveForBCrossZero(): expected b < 0; found b=" + b)
  let a = 1/b
  let c = -a
  return a * Math.exp(b * x) + c
}

let expMinusExpCurveCrossingIdentity = function(crossPoint,x) {
  let b = (x <= crossPoint) ?
    Math.exp(Math.exp(1-crossPoint) * (1-crossPoint) * (1-crossPoint)) :
    -Math.exp(crossPoint * Math.exp(crossPoint))-1
  let a = 1 / (b * Math.exp(b * crossPoint))
  let c = crossPoint - a * Math.exp(b * crossPoint)
  return a * Math.exp(b * x) + c
}

let getGaussian = function(a,b,c,d) {
  let f = function(x) {
    return a * Math.exp(-Math.pow((x-b), 2) / (2 * Math.pow(c,2))) - d
  }
  return f
}

/** similar to the above except it introduces quadratic f3(x) = rx^2
 * for the [0,cross1 + a bit].
 * hence,
 *      / min(f3,f1) on [0,cross2]
 * f = |  id at cross2
 *     \  f2 on [cross2,1]
 * */
let expLogQuadraticCurveCrossingIdentity = function(cross1, cross2, x) {
  assert(cross1 >= 0 && cross1 <= cross2 && cross2 <= 1,
    "expLogQuadraticCurveCrossingIdentity(): cross1 or cross2 bad: " +
    cross1 + ", " + cross2)
  let b = cross2
  let r = 1 / cross1
  let a = b/Math.E
  if (x <= b) {
    let k = 1/b
    let l = Math.log(a)
    let result =  Math.min(r * Math.pow(x,2), Math.exp(k * x + l))
    assertBetween(result, 0, 1,
      "expLogQuadraticCurveCrossingIdentity(): returning " +
      result + "; expected between 0 and 1")
    return result
  }
  let k = Math.exp(b)
  let l = Math.exp(b) * (1-b)
  let result = Math.log(k * x + l)
  assertBetween(result, 0, 1,
    "expLogQuadraticCurveCrossingIdentity(): returning " +
    result + "; expected between 0 and 1")
  return result
}

let conmanTrustChangeAfterInvestment = function(investment, investorEndowment, previousEstimate) {
  let transferProportion = investment / investorEndowment
  let diff = Math.sqrt(Math.abs(previousEstimate - transferProportion))
  return Math.max(0.7 - diff, 0)
}

let conmanTrustChangeAfterReturn = function(returnProportion, previousEstimate) {
  let scale = (returnProportion < 1) ?
    1/4 + returnProportion * 3/4 : 1 - (returnProportion - 1) * 3/4
  return (returnProportion === 1) ? previousEstimate :
    ((returnProportion >= 1) ?
      Math.exp(scale * previousEstimate-scale) :
      Math.log(scale*previousEstimate+1))
}