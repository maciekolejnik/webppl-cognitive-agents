/**
Game structure
- we refer to the two players as *investor* and *investee*
- state consists of
  * turn: indicates whether next move is investing or returning
  * timeLeft: how many time steps are left in the game (-1 means infinite horizon)
  * investments: history of amounts sent by investor (most recent in position 0)
  * returns: history of amounts sent by investee (most recent in position 0)

  //* endowments: a dictionary {'investor': x, 'investee': y} specifying
    how much both players received in endowments in this stage

- we allow integer transfers not exceeding money available to player
- gameParams configure the game as follows:
  * investorEndowment: how much does investor get at the start of each round
  * investeeEndowment: how much does investee get at the start of each round
*/

/**
var params = {
  endowments : {
    investor: 0,
    investee: 0
  },
  k: 0,
  horizon: {
    investor: 0,
    investee: 0
  }
}

 horizon is optional. it's introduced to model con man behaviour.
 the idea is that if horizon is passed for one of the players, then
 this players assumes game ends after that many moves. note that
 horizon is specified in terms of rounds, not steps.
*/
let makeTrustCSMG = function(gameSpecificParams) {
  let endowments = assertDefined(gameSpecificParams.endowments,
    "makeTrustCSMG(): endowments undefined")
  let investorEndowment = assertDefined(endowments.investor,
    "makeTrustCSMG(): investorEndowment undefined")
  let investeeEndowment = assertDefined(endowments.investee,
    "makeTrustCSMG(): investeeEndowment undefined")
  let k = assertDefined(gameSpecificParams.k,
    "makeTrustCSMG(): k undefined")
  let horizon = gameSpecificParams.horizon
  /**********************************
   *     Some auxiliary functions   *
   * ********************************/

  /** Compute endowment of agents in a state
   * @param state
   * @param params
   * @returns {investor: number, investee: number}
   */
  let endowment = function(state) {
    if (state.turn === "investor") {
      return endowments
    }
    return {
      investor: 0,
      investee: state.investments[0]
    }
  }

  /** Computes the monetary transfer for each agent (positive or negative)
   * when *action* is taken in *state*
   * Params:
   *  - *state*
   *  - *action*
   * Returns
   *   an dictionary indexed by agent with money amount received (positive) or
   *   given away (negative)
   */
  let transfer = function(state, action) {
    let investor = action * ((state.turn == "investor") ? -1 : 1)
    return {
      'investor': investor,
      'investee': -investor
    }
  }

  /** Compute maximal possible amount that can be transferred from a given state */
  let maxPossibleTransfer = function(state) {
    return (state.turn == 'investor') ? investorEndowment :
      state.investments[0] * k
  }

  /** Game mechanics */
  let actions = function(state) {
    if (state.turn == 'investor') {
      return rangeArray(0, investorEndowment)
      // return [0,params.endowments.investor]
    }
    console.assert(state.investments.length > 0,
      "Investee turn, but no past investments recorded")
    return rangeArray(0, state.investments[0] * k)
  }

  let transitionFn = function(state, action) {
    info("transitionFn(state: " + stateToString(state) + ", action: " + action + ")")
    let turn = state.turn
    let nextTurn = (turn == 'investor') ? 'investee' : 'investor'
    let nextInvestments = (turn == 'investor') ?
      [action].concat(state.investments) : state.investments
    let nextReturns = (turn == 'investee') ?
      [action].concat(state.returns) : state.returns
    let result = {
      turn: nextTurn,
      investments: nextInvestments,
      returns: nextReturns
    }
    info("transitionFn(state: " + stateToString(state) + ", action: " + action + ")"
      + ": computed " + stateToString(result))
    return Delta({v: result})
  }

  let turn = function (state) {
    return (state.turn === 'investor') ? 0 : 1
  }

  /** Compulsory API of a game */
  let API = function() {
    let getPreviousState = function (state) {
      if (isInitial(state)) return state
      let prevTurn = (state.turn == 'investor') ? 'investee' : 'investor'
      // var prevTimeLeft = state.timeLeft + 1
      let prevInvestments = (prevTurn == 'investor') ? state.investments.slice(1) : state.investments
      let prevReturns = (prevTurn == 'investee') ? state.returns.slice(1) : state.returns
      return {
        turn: prevTurn,
        // timeLeft: prevTimeLeft,
        investments: prevInvestments,
        returns: prevReturns
      }
    }

    let getLastAction = function (state) {
      console.assert(!isInitial(state), "Calling previousAction on initial state")
      if (state.investments.length > state.returns.length)
        return state.investments[0]
      else
        return state.returns[0]
    }

    let isInitial = function (state) {
      return state.investments.length === 0 && state.returns.length === 0
    }

    let stateToString = function (state) {
      return "{invs: " + arrayToString(state.investments) +
        ", rets: " + arrayToString(state.returns) + "}"
    }

    let API = {
      getPreviousState,
      getLastAction,
      isInitial,
      turn,
      stateToString
    }

    return API
  }()



  /** Physical rewards structure
   *  This is a relatively simple component which models state and
   *  action rewards that agents receive - these are the typical
   *  physical rewards familiar from other settings
   */
  let physicalRewardStructure = function() {

    let investorHorizon = (isDefined(horizon)) ? horizon.investor : undefined
    let investeeHorizon = (isDefined(horizon)) ? horizon.investee : undefined
    /** State rewards
     *
     * @param state
     * @returns {{investor: array[reward], investee: array[reward]}}
     */
    let stateRewards = function(state) {
      let endowments = endowment(state)
      let investor =
        (isDefined(investorHorizon) && state.returns.length >= investorHorizon) ?
          0 : endowments.investor
      let investee =
        (isDefined(investeeHorizon) && state.returns.length >= investeeHorizon) ?
          0 : endowments.investee
      return [
        [investor],
        [investee]
      ]
    }

    /** Action rewards
     *
     * @param state
     * @param action
     * @returns {{investor: array[number], investee: array[number]}}
     */
    let actionRewards = function(state, action) {
      let transfers = transfer(state, action)
      let investor =
        (isDefined(investorHorizon) && state.returns.length >= investorHorizon) ?
          0 : transfers.investor
      let investee =
        (isDefined(investeeHorizon) && state.returns.length >= investeeHorizon) ?
          0 : transfers.investee
      return [
        [investor],
        [investee]
      ]
    }

    return {
      actionRewards,
      stateRewards,
      quantity: 1
    }
  }()

  /** Mental state dynamics model
   *  It consists of two components:
   *  (i) Heuristics agents use to estimate mental state of their opponents.
   *    This should be specified as an array of update functions, one for each
   *    mental state. Each update function has
   *    @type (mentalStateValue, agent, state, action) -> newMentalStateValue
   *  (ii) Mental state computation, i.e. how can actual mental state of an
   *    agent be computed. Each such function that computes some mental state
   *    of an agent has
   *    @type (state, belief) -> mentalStateValue
   */
  let mentalStateDynamics = function() {
    let getLastAction = API.getLastAction
    let getPreviousState = API.getPreviousState
    let conman = isDefined(horizon) && isDefined(horizon.investee)

    /** updateTrustEstimation
     * captures the dynamics of how one agent estimates changes of their
     * opponent's trust upon them taking an action.
     *
     * @param trust {Double}  previous value of trust
     * @param estimatingAgentID {Int}
     *   identifies the agent who estimates trust value
     * @param estimatedAgentID {Int}
     *   identifies the agent whose trust is being estimated
     * @param state {Object}
     *
     * The idea behind the trust update is that trust increases
     * faster (in response to trustworthy actions) when it's low and
     * decreases faster (in response to untrustworthy actions) when
     * it's high.
     */
    let updateTrustEstimation = function(trust, estimatingAgentID, estimatedAgentID, state, observation) {
      let SMOOTHING_FACTOR = 0.3

      let lastState = getPreviousState(state)
      let action = getLastAction(state)
      let maxPossibleTransfer = maxPossibleTransfer(lastState)
      /** no trust update if there was no choice for investee */
      if (maxPossibleTransfer == 0) return trust
      /** trust of action-taker doesn't change  */
      if (turn(lastState) === estimatedAgentID && !conman) return trust

      let scale = Math.sqrt(1 / state.investments.length)
      let updateTrust = function(oldTrust, newTrust, scale) {
        return oldTrust + (newTrust - oldTrust) * scale
      }
      if (turn(lastState) === 0) {
        /** case: alice invests and estimates bob's trust change */

        /** special case: conman assumes opponent's trust is preserved by
         * investing proportionally to trust levels */
        if (conman && estimatingAgentID === 1) {
          let transferProportion = action / maxPossibleTransfer
          let diff = Math.sqrt(Math.abs(trust - transferProportion))
          return Math.max(0.7 - diff, 0)
          // return Math.max(0, trust - diff)
        }

        /** this is alternative to below
         * bob's trust is assumed to be affected by
         * 1. relationship between transfer/maxPossibleTransfer ratio and his trust
         * 2. relationship between transfer/previousTransfer ratio and his previous transfers
         * */
        let PEAK = 0.9
        let MAX_INCREASE = 0.25
        let MAX_DECREASE = 0.4
        // let WINDOW = 0.5

        let transferProportion = action / maxPossibleTransfer

        let WINDOW = 0.2 + 0.5 * transferProportion

        // below compute parameters to gaussian function
        let b = PEAK * transferProportion
        assert(b >= 0 && b < 1, "updateTrustEstimation(): " +
          "b=" + b + "; should be between 0 and 1!")
        let d = MAX_DECREASE * Math.sqrt(1-b)
        let a = d + MAX_INCREASE * Math.sqrt(1 - b)
        let c = WINDOW / (2 * Math.sqrt(2 * Math.log(a/d)))
        // display("a=" + a + ", b=" + b + ", c=" + c + ", d=" + d)
        let getGaussian = function(a,b,c,d) {
          let f = function(x) {
            return a * Math.exp(-Math.pow((x-b), 2) / (2 * Math.pow(c,2))) - d
          }
          return f
        }
        let gaussian = getGaussian(a,b,c,d)
        let newTrust1 = Math.min(1, Math.max(0, trust + gaussian(trust)))

        let computeInvesteeNicenessWithCertainty = function(state) {
          let pairs = zip(state.investments, state.returns)
          let nonZeroPairs = filter(function(x) { return x[0] !== 0 || x[1] !== 0}, pairs)
          let numberOfData = nonZeroPairs.length
          if (numberOfData === 0) return [0,0]
          // this asymptotically approaches 1
          let certainty = -1/(numberOfData + 1) + 1
          let niceness = reduceL(function (acc, el) {
            let returnProp = el[1] / el[0]
            return (acc === -1) ? returnProp : SMOOTHING_FACTOR * returnProp + (1 - SMOOTHING_FACTOR) * acc
          }, -1, nonZeroPairs)
          return [niceness, certainty]
        }
        let nicenessWithCertainty = computeInvesteeNicenessWithCertainty(lastState)
        let computeNewTrustFromNiceness = function(r1, r2, investorEndowment) {
          let auxInfo = "\nr1=" + r1 + "; r2=" + r2
          if (r2 > 1 || r2 >= r1) {
            let factor = (r2 <= 1) ? 1 + 0.4 * (1 - r2) : 1 - (r2 - 1) / (investorEndowment - 1) * 0.3
            assert(factor >= 0.7 && factor <= 1.4,
              "updateTrustEstimation(): factor=" + factor +
              "; expected between 0.7 and 1.4!" + auxInfo)
            let result = Math.exp(factor * trust - factor)
            return result
          }
          /** otherwise, trust decreases */
          let factor = 0.3 + 0.4 * (r1 - r2) / 2
          assert(factor >= 0.3 && factor <= 0.7,
            "updateTrustEstimation(): factor=" + factor +
            "; expected between 0.3 and 0.7")
          let result = Math.log((Math.exp(factor) - 1) * trust + 1)
          return result
        }
        let theirNiceness = nicenessWithCertainty[0]
        let certainty = nicenessWithCertainty[1]
        let myNiceness = lastState.investments.length === 0 ? 0 : action / (lastState.investments[0] || 1)
        let newTrust2 = computeNewTrustFromNiceness(theirNiceness, myNiceness, investorEndowment)

        let newTrust = newTrust1 * (1 - certainty) + newTrust2 * certainty

        return updateTrust(trust, newTrust, scale)

        /** first investment is a special case, the idea is that bob's
         * trust will increase if investment (as a proportion of maximal
         * possible investment) is roughly equal to his trust (estimated
         * by alice). otherwise his trust might go down a little.
         * for example, if alice estimates bob's trust to be 0.7 then
         * if she invests 3 (out of possible 4), trust estimation won't
         * change much. but is she invests 1 (out of 4) then trust goes
         * down. also if she estimates trust to be 0.2 and she invests
         * 4 (out of 4), then this would be considered suspiciously
         * high and trust would not actually increase */
        if (lastState.returns.length === 0) {
          let transferProportion = action / maxPossibleTransfer
          let c1 = Math.max(0, transferProportion - 0.3)
          let c2 = Math.min(1, transferProportion * 1.2)
          return expLogQuadraticCurveCrossingIdentity(c1, c2, trust)
          // return (transferProportion >= trust) ? Math.exp(trust-1) : Math.log(trust+1)
        }
        let lastReturn = lastState.returns[0]
        let lastInvestment = lastState.investments[0]
        if (lastInvestment == 0) return trust
        /** r1 measures how 'nice' investee was */
        let r1 = lastReturn / lastInvestment
        assert(r1 >= 0 && r1 <= 2, "updateTrustEstimation(): " +
          "r1=" + r1 + "; should be between 0 and 2!")
        /** r2 measures how 'nice' investor was */
        let r2 = action / lastInvestment
        assert(r2 >= 0 && r2 <= investorEndowment,
          "updateTrustEstimation(): r2=" + r2 + "; should be " +
          "between 0 and endowment!")

        /** trust will increase if investor is at least as nice as investee */

        return computeNewTrustFromNiceness(r1,r2,investorEndowment)
      }

      /** case of bob's return - bob estimates how alice's trust
       * changes after his return */
      let lastInvestment = lastState.investments[0]
      let returnProportion = action / lastInvestment

      /** special case: conman has a differnt perception of trust changes */
      if (conman && estimatingAgentID === 1) {
        // let scale = (returnProportion < 1) ?
        //   1/2 + returnProportion * 1/2 : 1 - (returnProportion - 1) * 1/2
        let scale = (returnProportion < 1) ?
          1/4 + returnProportion * 3/4 : 1 - (returnProportion - 1) * 3/4
        return (returnProportion === 1) ? trust :
          ((returnProportion >= 1) ? Math.exp(scale * trust-scale) : Math.log(scale*trust+1))
      }

      /** the idea is to pick a dynamics function based on proportion
       * of returned money when compared with investment.
       * This proportion ranges between 0 and 2. There are following
       * cases:
       * (i) proportion in [1,1.2] - that's considered an 'expected'
       * return and result in an increase of trust according to exp(x-1)
       * (ii) proportion > 1.2 - that's considered a higher than expected
       * return and hence modeled with exp log curve. Such curve is
       * characterised by where it meets identity - this point is denoted
       * 'b' below and computed by a function f(x) = 3/x - 3/2. This
       * function is chosen as we require f(1.2)=1 and f(2)=0 and we
       * want it to decrease faster initially
       * (iii) proportion < 1 - this is similar to previous case except
       * that we now use f(x) = x^2 to ensure decreasing faster first
       */
      let computeTrustChangeAfterReturn = function(trust, returnProportion) {
        assertBetween(returnProportion, 0, 2,
          "updateTrustEstimation(): returnProportion expected in " +
          "[0,2]; found: " + returnProportion)
        if (returnProportion > 1.2) {
          let b = 3 / returnProportion - 3/2
          assertBetween(b, 0, 1,
            "updateTrustEstimation(): case >= 1.2, b=" + b)
          return expLogCurveCrossingIdentity(b, trust)
        }
        if (returnProportion < 1) {
          return expLogCurveCrossingIdentity(Math.pow(returnProportion, 2), trust)
        }
        /** case (i) */
        return Math.exp(trust - 1)
      }
      let newTrust = computeTrustChangeAfterReturn(trust, returnProportion)
      return updateTrust(trust, newTrust, scale)
      // return newTrust
    }

    /** This basically expresses a curve on [0,1] that starts (at x=0)
     * as (stretched-out) exponential above y=x identity line, crosses
     * y=x at x=crossPoint and then continues as logarithmic from
     * x=crossPoint until x=1.
     *
     * In particular, this function computes f(x) where f is a
     * (trust dynamics) function that
     * starts (at x=0) as f1(x) = exp(kx+l) (k and l depend on crossPoint)
     * then crossed y=x at x=crosspoint and then continues as
     * f2(x) = log(kx+l) (k and l depend on crossPoint but are different than above)
     * until x=1.
     * hence, overall,
     *      / f1 on [0,crossPoint]
     * f = |  id at crossPoint
     *     \  f2 on [crossPoint,1]
     * */
    let expLogCurveCrossingIdentity = function(crossPoint, x) {
      let b = crossPoint
      let a = b/Math.E
      let c = b + Math.log(2-b)
      if (x <= b) {
        let k = 1/b
        let l = Math.log(a)
        let result = Math.exp(k * x + l)
        assertBetween(result, 0, 1,
          "expLogCurveCrossingIdentity(): returning " +
           result + "; expected between 0 and 1")
        return result
      }
      let k = Math.exp(b)
      let l = Math.exp(b) * (1-b)
      let result = Math.log(k * x + l)
      assertBetween(result, 0, 1,
        "expLogCurveCrossingIdentity(): returning " +
        result + "; expected between 0 and 1")
      return result
    }

    /** similar to the above except it introduces quadratic f3(x) = rx^2
     * for the [0,cross1 + a bit].
     * hence,
     *      / min(f3,f1) on [0,cross2]
     * f = |  id at cross2
     *     \  f2 on [cross2,1]
     * */
    let expLogQuadraticCurveCrossingIdentity = function(cross1, cross2, x) {
      assert(cross1 >= 0 && cross1 <= cross2 && cross2 <= 1,
        "expLogQuadraticCurveCrossingIdentity(): cross1 or cross2 bad: " +
      cross1 + ", " + cross2)
      let b = cross2
      let r = 1 / cross1
      let a = b/Math.E
      if (x <= b) {
        let k = 1/b
        let l = Math.log(a)
        let result =  Math.min(r * Math.pow(x,2), Math.exp(k * x + l))
        assertBetween(result, 0, 1,
          "expLogQuadraticCurveCrossingIdentity(): returning " +
          result + "; expected between 0 and 1")
        return result
      }
      let k = Math.exp(b)
      let l = Math.exp(b) * (1-b)
      let result = Math.log(k * x + l)
      assertBetween(result, 0, 1,
        "expLogQuadraticCurveCrossingIdentity(): returning " +
        result + "; expected between 0 and 1")
      return result
    }

    /** Compute agentID's trust toward the other agent */
    let computeTrust = function(agentID, belief, state) {
      let opponentID = otherAgentID(agentID)
      let individualBelief = retrieveBeliefOver(opponentID, belief)
      return goalCoeffExpectation(individualBelief, 1)
    }

    return {
      estimationHeuristicArr: [ updateTrustEstimation ],
      mentalStateArr: [ computeTrust ],
      mentalUtilities: [
        [(conman ? [0,1] : [1])], /** agent 0 */
        [[0]]  /** agent 1 */
      ]
    }
  }()

  let initialState = {
    turn: 'investor',
    investments: [],
    returns: []
  }

  let params = {
    numberOfAgents: 2,
    numberOfRewards: {
      physical: 1,
      mental: 1
    }
  }

  let rewardUtilityFunctions = function() {
    let moneyUtility = function(x) {
      return x
    }

    let trustUtility = function(x) {
      return 8 * x
    }

    return {
      physical: [moneyUtility],
      mental: [trustUtility]
    }
  }()

  return {
    actions,
    transitionFn,
    initialState,
    physicalRewardStructure,
    mentalStateDynamics,
    rewardUtilityFunctions,
    API,
    params
  }
}