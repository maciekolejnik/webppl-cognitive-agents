/** trustChangeAfterInvestment
 * trust update following an investment might seem fairly straightforward -
 * the more you invest, the bigger the trust gets. However, there are some
 * caveats:
 * - same investment may lead to different trust change depending on prior trust
 * - previous behvaiour (i.e., returns) of the investee likely affect their
 *   expectations and hence, their trust changes
 *
 * We therefore devise the following model of trust dynamics:
 * The new estimation of trust is a weighted average of two updated trust values:
 *   (1) one computed based on the principle that investment (as a proportion of
 *   maximal possible investment) should be close, ideally slightly higher than
 *   investee's trust.
 *   (2) second computed based on previous behaviour of investee and their (deduced)
 *   expectations that stem from it
 * The weight is based on the amount of evidence for (2).
 * Below we describe in detail how (1), (2) and the weight is computed.
 *
 * (1) For a given investment level (measured on a 0-1 scale, relative to max possible
 *     investment), new trust can be represented as a function of
 *     old trust. The idea is to modify
 *     the identity function by adding a gaussian function to it. Gaussian
 *     has to be scaled appropriately and its peak is chosen to be slightly smaller
 *     that the investment (motivated by the fact that an ideal investment is
 *     one that's slightly higher than current trust).
 *
 * (2) Here we introduce the concept of 'niceness', which measures how nice an
 *     agent is. When applied to the investee, this boils down to aggregating their
 *     past returns. Here, we use exponential smoothing so that more recent returns
 *     matter more.
 *
 * @param history an array of [ investment, return ] tuples, most recent come first,
 *    but the latest investment is not included
 */
let trustChangeAfterInvestment = function(investment, investorEndowment, previousEstimate, history) {
  let investProportion = investment / investorEndowment
  let newEstimate1 = trustChangeActionVsExpectation(investProportion, previousEstimate)

  let nicenessAndCertainty = computeInvesteeNicenessAndCertainty(history)
  let theirNiceness = nicenessAndCertainty[0]
  // myNiceness is based on comparing this investment to previous investment
  let myNiceness = history.length === 0 ? 0 : investment / (history[0][0] || 1)
  let newEstimate2 = trustChangeActionAsResponseToNiceness(theirNiceness, myNiceness, investorEndowment, previousEstimate)

  let certainty = nicenessAndCertainty[1]
  let newEstimate = newEstimate1 * (1 - certainty) + newEstimate2 * certainty
  return newEstimate
}


let trustChangeActionVsExpectation = function(action, oldTrust) {

  return expMinusExpCurveCrossingIdentity(action, oldTrust)
  let PEAK = 0.9
  let MAX_INCREASE = 0.25
  let MAX_DECREASE = 0.4
  let WINDOW = 0.2 + 0.5 * action

  let b = PEAK * action
  assert(b >= 0 && b < 1, "updateTrustEstimation(): " +
    "b=" + b + "; should be between 0 and 1!")
  let d = MAX_DECREASE * Math.sqrt(1-b)
  let a = d + MAX_INCREASE * Math.sqrt(1 - b)
  let c = WINDOW / (2 * Math.sqrt(2 * Math.log(a/d)))
  let gaussian = getGaussian(a,b,c,d)

  // new trust is f(oldTrust) where f is identity + gaussian
  let newTrustUnbounded = oldTrust + gaussian(oldTrust)
  let newTrust = Math.min(1, Math.max(0, newTrustUnbounded))
  return newTrust
}

let expMinusExpCurveCrossingIdentity = function(crossPoint,x) {
  let b = (x <= crossPoint) ?
    Math.exp(Math.exp(1-crossPoint) * (1-crossPoint) * (1-crossPoint)) :
    -Math.exp(crossPoint * Math.exp(crossPoint))-1
  let a = 1 / (b * Math.exp(b * crossPoint))
  let c = crossPoint - a * Math.exp(b * crossPoint)
  display('a: ' + a)
  display('b: ' + b)
  display('c: ' + c)
  return a * Math.exp(b * x) + c
}

let trustChangeActionAsResponseToNiceness = function(r1, r2, investorEndowment, trust) {
  let auxInfo = "\nr1=" + r1 + "; r2=" + r2
  if (r2 > 1 || r2 >= r1) {
    let factor = (r2 <= 1) ? 1 + 0.4 * (1 - r2) : 1 - (r2 - 1) / (investorEndowment - 1) * 0.3
    assert(factor >= 0.7 && factor <= 1.4,
      "updateTrustEstimation(): factor=" + factor +
      "; expected between 0.7 and 1.4!" + auxInfo)
    let result = Math.exp(factor * trust - factor)
    return result
  }
  /** otherwise, trust decreases */
  let factor = 0.3 + 0.4 * (r1 - r2) / 2
  assert(factor >= 0.3 && factor <= 0.7,
    "updateTrustEstimation(): factor=" + factor +
    "; expected between 0.3 and 0.7")
  let result = Math.log((Math.exp(factor) - 1) * trust + 1)
  return result
}

let computeInvesteeNicenessAndCertainty = function(history) {
  let SMOOTHING_FACTOR = 0.3
  let nonZeroPairs = filter(function(x) { return x[0] !== 0 || x[1] !== 0}, history)
  let numberOfData = nonZeroPairs.length
  if (numberOfData === 0) return [0,0]
  // this asymptotically approaches 1
  let certainty = -1/(numberOfData + 1) + 1
  let niceness = reduceL(function (acc, el) {
    let returnProp = el[1] / el[0]
    return (acc === -1) ? returnProp : SMOOTHING_FACTOR * returnProp + (1 - SMOOTHING_FACTOR) * acc
  }, -1, nonZeroPairs)
  return [niceness, certainty]
}

/** trustChangeAfterReturn
 * the idea is to pick a dynamics function based on proportion
 * of returned money when compared with investment.
 * This proportion ranges between 0 and 2. There are following
 * cases:
 * (i) proportion in [1,1.2] - that's considered an 'expected'
 * return and result in an increase of trust according to exp(x-1)
 * (ii) proportion > 1.2 - that's considered a higher than expected
 * return and hence modeled with exp log curve. Such curve is
 * characterised by where it meets identity - this point is denoted
 * 'b' below and computed by a function f(x) = 3/x - 3/2. This
 * function is chosen as we require f(1.2)=1 and f(2)=0 and we
 * want it to decrease faster initially
 * (iii) proportion < 1 - this is similar to previous case except
 * that we now use f(x) = x^2 to ensure decreasing faster first
 */
let trustChangeAfterReturn = function(returnProportion, previousEstimate) {
  assertBetween(returnProportion, 0, 2,
    "trustChangeAfterReturn(): returnProportion expected in " +
    "[0,2]; found: " + returnProportion)
  if (returnProportion > 1.2) {
    let b = 3 / returnProportion - 3/2
    assertBetween(b, 0, 1,
      "updateTrustEstimation(): case >= 1.2, b=" + b)
    return expLogCurveCrossingIdentity(b, previousEstimate)
  }
  if (returnProportion < 1) {
    return expLogCurveCrossingIdentity(Math.pow(returnProportion, 2), previousEstimate)
  }
  /** case (i) */
  return Math.exp(previousEstimate - 1)
}

/** This basically expresses a curve on [0,1] that starts (at x=0)
 * as (stretched-out) exponential above y=x identity line, crosses
 * y=x at x=crossPoint and then continues as logarithmic from
 * x=crossPoint until x=1.
 *
 * In particular, this function computes f(x) where f is a
 * (trust dynamics) function that
 * starts (at x=0) as f1(x) = exp(kx+l) (k and l depend on crossPoint)
 * then crossed y=x at x=crosspoint and then continues as
 * f2(x) = log(kx+l) (k and l depend on crossPoint but are different than above)
 * until x=1.
 * hence, overall,
 *      / f1 on [0,crossPoint]
 * f = |  id at crossPoint
 *     \  f2 on [crossPoint,1]
 * */
let expLogCurveCrossingIdentity = function(crossPoint, x) {
  let b = crossPoint
  let a = b/Math.E
  let c = b + Math.log(2-b)
  if (x <= b) {
    let k = 1/b
    let l = Math.log(a)
    let result = Math.exp(k * x + l)
    assertBetween(result, 0, 1,
      "expLogCurveCrossingIdentity(): returning " +
      result + "; expected between 0 and 1")
    return result
  }
  let k = Math.exp(b)
  let l = Math.exp(b) * (1-b)
  let result = Math.log(k * x + l)
  assertBetween(result, 0, 1,
    "expLogCurveCrossingIdentity(): returning " +
    result + "; expected between 0 and 1")
  return result
}

let getGaussian = function(a,b,c,d) {
  let f = function(x) {
    return a * Math.exp(-Math.pow((x-b), 2) / (2 * Math.pow(c,2))) - d
  }
  return f
}

/** similar to the above except it introduces quadratic f3(x) = rx^2
 * for the [0,cross1 + a bit].
 * hence,
 *      / min(f3,f1) on [0,cross2]
 * f = |  id at cross2
 *     \  f2 on [cross2,1]
 * */
let expLogQuadraticCurveCrossingIdentity = function(cross1, cross2, x) {
  assert(cross1 >= 0 && cross1 <= cross2 && cross2 <= 1,
    "expLogQuadraticCurveCrossingIdentity(): cross1 or cross2 bad: " +
    cross1 + ", " + cross2)
  let b = cross2
  let r = 1 / cross1
  let a = b/Math.E
  if (x <= b) {
    let k = 1/b
    let l = Math.log(a)
    let result =  Math.min(r * Math.pow(x,2), Math.exp(k * x + l))
    assertBetween(result, 0, 1,
      "expLogQuadraticCurveCrossingIdentity(): returning " +
      result + "; expected between 0 and 1")
    return result
  }
  let k = Math.exp(b)
  let l = Math.exp(b) * (1-b)
  let result = Math.log(k * x + l)
  assertBetween(result, 0, 1,
    "expLogQuadraticCurveCrossingIdentity(): returning " +
    result + "; expected between 0 and 1")
  return result
}

let conmanTrustChangeAfterInvestment = function(investment, investorEndowment, previousEstimate) {
  let transferProportion = investment / investorEndowment
  let diff = Math.sqrt(Math.abs(previousEstimate - transferProportion))
  return Math.max(0.7 - diff, 0)
}

let conmanTrustChangeAfterReturn = function(returnProportion, previousEstimate) {
  let scale = (returnProportion < 1) ?
    1/4 + returnProportion * 3/4 : 1 - (returnProportion - 1) * 3/4
  return (returnProportion === 1) ? previousEstimate :
    ((returnProportion >= 1) ?
      Math.exp(scale * previousEstimate-scale) :
      Math.log(scale*previousEstimate+1))
}

display(expMinusExpCurveCrossingIdentity(0.8, 0.8))
display(expMinusExpCurveCrossingIdentity(0.8, 1))
undefined