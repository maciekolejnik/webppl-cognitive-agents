/* Auxiliary */
let parseInt = function(string) {_.parseInt(string)}

let extractElementAtIndex = function(index) {
  let extract = function(array) {
    return array[index]
  }
  return extract
}

let replace = function(array, index, newElem) {
  let f = function(acc, elem) {
    if (acc.length == index) {
      return acc.concat([newElem])
    } else {
      return acc.concat([elem])
    }
  }
  return reduceL(f, [], array)
}

let zeroMatrixAsArray = function(dims) {
  let rows = dims[0]
  let columns = dims[1]
  return repeat(rows, function() {
    return repeat(columns, function() {
      return undefined
    })
  })
}

let concatStrings = function(arrayOfStrings) {
  return reduceL(function(acc, element) {
    return acc + "\n" + element
  }, "", arrayOfStrings)
}

  /** Updates the (rowIndex, columnIndex) entry in a table
   * (represented as 2 dimensional array) - sets it to 'element'
   */
let updateTable = function(table, rowIndex, columnIndex, element) {
  return replace(table, rowIndex, replace(table[rowIndex], columnIndex, element))
}

/** Assumption is sampling returns a tensor */
let discretiseContinuousDistribution = function(dist, samples) {
  return Infer({method: 'forward', samples: samples}, function() {
    let sample = sample(dist)
    if (sample.dims !== undefined) {
      return T.toScalars(sample)
    } else {
      return sample
    }
  })
}

let beliefOverAgentToString = function(belief) {
  /** A little hacky - check if goalCoeffsBelief is discrete or not. If not, discretise */
  let goalCoeffsBelief = (belief.goalCoeffsBelief.name != 'Discrete') ?
    discretiseContinuousDistribution(belief.goalCoeffsBelief, 100) : belief.goalCoeffsBelief
  let moneyCoeffExpectation = expectation(goalCoeffsBelief, extractElementAtIndex(0))
  let trustCoeffExpectation = expectation(goalCoeffsBelief, extractElementAtIndex(1))
  // let alphaBelief = (belief.metaParamsBelief.alpha.name != 'Discrete') ?
  //   discretiseContinuousDistribution(belief.metaParamsBelief.alpha, 50) : belief.metaParamsBelief.alpha
  // let alphaExpectation = expectation(alphaBelief)
  return "E[moneyCoeff] = " + moneyCoeffExpectation
    + "\nE[trustCoeff] = " + trustCoeffExpectation
    + "\nbelief: " + belief.beliefBelief
    + "\nmentalEstimations: " + belief.mentalEstimationsBelief
}

/** function for converting tensors to array, with a caveat that an array may be passed,
 * in which case nothing should be done
 * @param tensorOrArray
 */
let convertToArray = function(tensorOrArray) {
  /** check if array */
  if (_.isArray(tensorOrArray)) {
    return tensorOrArray
  }
  /** otherwise assume it's a tensor */
  return T.toScalars(tensorOrArray)
}

/** Prediction evaluation metrics */
let evaluationMetrics = function() {
  let probabilisticMSE = function() {
    let evaluatePrediction = function(predictionDist, observedAction) {
      return expectation(predictionDist, function(action) {
        return Math.pow(action - observedAction, 2)
      })
    }

    let aggregateEvaluations = function(evaluationsArray) {
      return listMean(evaluationsArray)
    }

    return {
      name: 'probabilistic MSE',
      evaluatePrediction,
      aggregateEvaluations
    }
  }()

  return [probabilisticMSE]
}()

let sampleAction = function(agent, atState) {
  let act = agent.act
  let actionDist = act(atState)
  return sample(actionDist)
}

/** Sampling */
let samplers = function() {
  let tensorSampler = function() {
    let sampleFunc = function(dist) {
      /** Assumption is sampling from dist returns a tensor. So we convert to array*/
      return T.toScalars(sample(dist))
    }

    return {
      sampleFunc
    }
  }()

  let normalSampler = function() {
    let sampleFunc = function(dist) {
      /** here we can just sample */
      return sample(dist)
    }

    return {
      sampleFunc
    }
  }()
  return {
    'dirichlet': tensorSampler,
    'discrete': normalSampler
  }
}()


let sampleGoalCoeffs = function(goalCoeffsBelief) {
  let sampler = samplers[goalCoeffsRep]
  let sampleFunc = sampler.sampleFunc
  return sampleFunc(goalCoeffsBelief)
}

/******************************
 *        CONSTANTS           *
 *****************************/

let goalCoeffsRep = 'dirichlet'

/**
 * Here starts the 'pipeline'. We assume some data is passed in some files,
 * which is then read and processed (phase 1). Based on passed data,
 * appropriate data structures are then instantiated (phase 2). That
 * is followed by learning (phase 3), where provided data is used
 * to infer parameters of agents. Finally, using what has been learned,
 * agents' behaviour is predicted (phase 4) and the predictions
 * are evaluated (phase 5).
 */

/*******************************
 *   INPUT PROCESSING PHASE    *
 ******************************/
/** Get the file name. Assume its passed in the command line after --data */
let filename = argv.data
if (filename === undefined) {
    error("Please specify a data file name using --data <filename> command line")
}

/** Read the file and filter out any irrelevant lines (comments starting with %, empty lines) */
let allLines = fs.read(filename).split('\n')
let isRelevant = function(line) { return !line.startsWith('%') && line.length > 0}

/**
 * First line contains player names and identifiers
 * Second line contains parameters of the experiment (endowments, k, horizon)
 * Third line onwards contains experimental data
 */
let lines = filter(isRelevant, allLines)

/**
 * Process first line.
 * Expected input format: eg "(0,bob);(1,alice);...;(5,celine)"
 *      (ideally, player ids start from 0 and increment by 1)
 * Transform into array: [[0, 'bob'],[1,'alice'],...,[5,'celine']]
*/
let processPlayersLine = function(line) {
    let playerStringToArray = function(string) {
        let array = string.slice(1,-1).split(',')
        return [parseInt(array[0]), array[1]]
    }
    return sort(map(playerStringToArray, line.split(';')))
}
let playersArray = processPlayersLine(lines[0])

/**
 * Process second line
 * Expected input format: eg "10,5,2,10,1" (er,ei,k,horizon,beliefRep)
 * Transform into object:
   {
     endowments : {
      investor : 10,
      investee: 5
     },
     k: 2,
     horizon: 10,
     beliefRepresentation: 'dirichlet'
   }
*/
let processParamsLine = function(line) {
    let beliefRepresentations = ['discrete', 'dirichlet']
    let paramsArray = map(parseInt, line.split(','))
    return {
      endowments : {
        investor: paramsArray[0],
        investee: paramsArray[1]
      },
      k: paramsArray[2],
      horizon: paramsArray[3],
      beliefRepresentation: beliefRepresentations[paramsArray[4]]
    }
}
let params = processParamsLine(lines[1])

/** Finally, process experimental data (lines 3 onwards)
 * @param lines | array of arrays, each of format:
 *                  <id1>,<id2>,<roundNo>,<investment>,<return>
 * @returns array of arrays of arrays, converted to numbers, grouped by pairs of players,
 * eg [[[1,2,1,5,4],...,[1,2,8,0,0]],[1,3,1,7,8],...,[1,3,8,4,6],...]
*/
let processDataLines = function(lines) {
    let dataLineToArray = function(line) {
        return map(parseInt, line.split(',')) 
    }
    let samePlayerPair = function(arr1, arr2) {
        return arr1[0] == arr2[0] && arr1[1] == arr2[1]
    }
    return groupBy(samePlayerPair, map(dataLineToArray, lines))
}
let data = processDataLines(lines.splice(2,lines.length-2))
display("DATA:")
display(data)
/**
 * We now have three objects:
 * - *playersArray*
 * - *params*
 * - *data*
 */

/*******************************
 *    DATA STRUCTURE SETUP     *
 ******************************/

/**
Now set up the main players array which will hold our belief over all their
parameters and beliefs.
The idea is to store it in a (part-empty) array where data corresponding to player
with id <id> is stored in the array position indexed by <id>. Since we don't enforce
player ids to start from 0 and increment by 1, resulting array might have 'holes'.
Each entry of this array is (either undefined or) an object representing an agent 
(player), in particular its
 (i) name,
 (ii) our current belief about its parameters and
 (iii) our current belief about its belief about other agents' parameters.
The beliefs are stored in a special array that is again indexed by player ids and might have 'holes'.
The object has the following format:
{ 
  name: 'bob',
  goalCoeffsBelief: <distribution over vectors of coeffs [c1,c2,...,cn] where sum (ci)=1>,
  metaParamsBelief:
    {
      alpha: distribution over <number>,
      discountFactor: distribution over <number>,
      lookAhead: distribution over <number>
    },
  mentalEstimationsBelief: an array of belief over each mental estimation
    (where mental estimation is assumed to be a single number [expectation]),
  beliefBelief: a belief array, see more detail below
}

*/

/** constructPlayersDataStructure | constructs the data structure described above
 *  importantly,
 * @param playersArray: array of pairs [<playerID>, <playerName>], eg
 *      [[1, 'bob'],[2,'alice'],...,[5,'celine']]
*/
let constructPlayersDataStructure = function(playersArray) {
    /** Our prior belief over goal coefficients of an agent */
    /** currently, uniform based on sampling. improve later*/
    /** a prior could be encoded here */
    let goalCoeffsPrior = Infer({method: 'forward', samples: 10}, function() {
      // let a = uniform(0,1)
      let a = beta(3,1.5)
      return [a, 1-a]
    })
      /** TODO: Currently, prior is encoded here. It should be moved level up to
       * facilitate comparing and trying different priors */
    // let goalCoeffsPrior = Dirichlet({alpha: Vector([1,1])})

    /** Our prior belief over meta params of an agent */
    let metaParamsPrior = {
      /** We only try to learn rationality of an agent */
        // alpha: Uniform({a: 0, b: 100}),
        // alpha: Gamma({shape: 5, scale: 1}),
        alpha: Delta({v: 100}),
        discountFactor: Delta({v: 0.8}),
        lookAhead: Delta({v: 2})
    }

    /** Our prior belief over mental estimations of an agent */
    // let mentalEstimationsPrior = [Categorical({vs: [0.2, 0.4, 0.6, 0.8]})]
    // let mentalEstimationsPrior = Categorical({vs: [[0.2], [0.4], [0.6], [0.8]]})
    let mentalEstimationsPrior = Categorical({ps: [0.4,0.3,0.2,0.1], vs: [[0.2], [0.4], [0.6], [0.8]]})
    /** Assumed to be known for now */
    // let mentalEstimationsPrior = [Delta({v: [0.6]})]

    /** Construct belief array for *playerID*.
     *  Belief array consists of our belief over agent's belief over every other player.
     *  It is an array of distributions, where each distribution is over belief parameters.
     *  Typically, there are two agents only, so we expect the array to only contain one
     *  distribution, and one (or more) 'undefined' (>1 if player IDs don't start from 0).
     *  (eg if there are two players with ids 1 and 2, then belief array for player 1 will be
     *  [undefined, undefined, <belief_over_id1_belief_over_id2>]
     * */
    let constructBeliefArray = function(playersArray, playerID) {
        // let initialBeliefOverBelief = Infer({method: 'forward', samples: 10}, function() {
        //   let a = uniform(0,1)
        //   return [1+a, 2-a]
        // })
        /** this is our prior over each agent's belief over another agent
         * it could be customized on a per agent basis, for now we make it one simple default */
        // let initialBeliefOverBelief = Delta({v: [1.5,4]})
        // let initialBeliefOverBelief = Categorical({vs: [[1.5,3.5], [2,3], [2.5,2.5], [3,2], [3.5,1.5]]})
        let initialBeliefOverBelief = Categorical({ps: [0.1, 0.15, 0.20, 0.25, 0.3],
            vs: [[1.5,3.5], [2,3], [2.5,2.5], [3,2], [3.5,1.5]]})
        let constructBeliefArrayHelper = function(playersArray, playerID, iteration, index) {
            if (index > playersArray.length - 1) {
                return []
            }
            let nextPlayerID = playersArray[index][0]
            if (iteration == nextPlayerID && iteration != playerID) {
                return [initialBeliefOverBelief].concat(
                    constructBeliefArrayHelper(playersArray, playerID, iteration+1, index+1))
            }
            let nextIndex = (iteration == playerID) ? index+1 : index
            return [undefined].concat(
                constructBeliefArrayHelper(playersArray, playerID, iteration+1, nextIndex))
        }
        return constructBeliefArrayHelper(playersArray, playerID, 0, 0)
    }

    /** constructPlayersHelper | function that creates the player data structure
     * @param playersArray | array of pairs [<playerID, name>], assumed ordered by ID
     * @param iteration | number of entries the resulting array already has
     * @param index | current index into *playersArray*, indicates next player
     *  for which we will create an entry in players data structure
     *
     * @returns an array with holes (undefined), where ith entry contains an object
     * representing an agent (with id i) and our belief about agent's parameters and beliefs.
     **/
    let constructPlayersHelper = function(playersArray, iteration, index) {
        if (index > playersArray.length - 1) {
            return []
        }
        let nextPlayerID = playersArray[index][0]
        if (iteration == nextPlayerID) {
            let player = {
                name: playersArray[index][1],
                goalCoeffsBelief: goalCoeffsPrior,
                metaParamsBelief: metaParamsPrior,
                beliefBelief: constructBeliefArray(playersArray, nextPlayerID),
                mentalEstimationsBelief: mentalEstimationsPrior,
            }
            return [player].concat(constructPlayersHelper(playersArray, iteration+1, index+1))
        }
        return [undefined].concat(constructPlayersHelper(playersArray, iteration+1, index))
    }
    return constructPlayersHelper(playersArray, 0, 0)
}

/** *players* is an array with a lot of structure for each entry - see above */
let players = constructPlayersDataStructure(playersArray)
display(players)

/*******************************
 *       LEARNING PHASE        *
 ******************************/

/** Construct game structure */
let csmg = makeCSMG(makeTrustCSMG(params))
/** Save for easier access */
let transitionFn = csmg.transitionFn
let stateToString = csmg.API.gameSpecific.stateToString

/** sampleAgentCharacteristicsFromBelief
 *
 * @param belief | our belief about agent's characteristics (parameters and state)
 * @returns agent characteristics, i.e. an object consisting of agent params and state
 */
let sampleAgentCharacteristicsFromBelief = function(belief) {
  let params = {
    goalCoeffs: convertToArray(sample(belief.goalCoeffsBelief)),
    metaParams: {
      alpha: sample(belief.metaParamsBelief.alpha),
      discountFactor: sample(belief.metaParamsBelief.discountFactor),
      lookAhead: sample(belief.metaParamsBelief.lookAhead)
    }
  }
  let initialState = function() {
    let sampleMentalEstimation = function(priorDist) {
      return Delta({v: sample(priorDist)})
    }
    let sampleMentalEstimations = function(dist) {
      let expectations = sample(dist) // and array of expectations of mental state values
      return map(function (expectation) {
        return Delta({v: expectation})
      }, expectations)
    }
    return {
      belief: sample(belief.beliefBelief),
      // mentalEstimations: map(sampleMentalEstimation, belief.mentalEstimationsBelief),
      mentalEstimations: sampleMentalEstimations(belief.mentalEstimationsBelief),
      metaParamsEstimations: { // TODO: this should be included in belief
        alpha: Categorical({vs: [100]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.8]})
      }
    }
  }()
  return {
    params,
    initialState
  }
}

/** posterior | learn agent characteristics (and beliefs, later) from data
 * @param players | big array containing prior belief about agents
 * @param data | parsed input data, detailing transfers and returns in each round,
 *    @type array of arrays, each inner array representing one play of trust game
 *    between two players, e.g. [[[1,2,0,10,16], [1,2,1,10,6]], [[2,1,0,4,4], [2,1,1,1,1]]]
*/ 
let posteriorAndGameState = function(players, data) {
  let updatePrior = function(prior, agentID, observedAction, atState) {
    display("Prior of " + agentID + ": " + beliefOverAgentToString(prior))
    let jointPosterior = Infer({method: 'enumerate'}, function() {
    // let jointPosterior = Infer({method: 'MCMC', samples: 100}, function() {
    // let jointPosterior = Infer({method: 'SMC', particles: 100}, function() {
      let agentCharacteristics = sampleAgentCharacteristicsFromBelief(prior) // index should not be needed
      let agent = makeAgent(agentCharacteristics.params, agentID, agentCharacteristics.initialState, csmg)
      let action = sampleAction(agent, atState)
      /** TODO: should experiment with this condition, maybe something less hard, such as factor statement */
      // condition(action == observedAction)
      let logProb = Math.exp((-1) * Math.abs(action - observedAction))
      factor(logProb)
      // display("new values: " + agentCharacteristics.params.goalCoeffs + ", " +
      //   agentCharacteristics.initialState.belief + ", " + agentCharacteristics.initialState.mentalEstimations)
      // display("computed actino: " + action + ",  observed: " + observedAction + ", logProb: " + logProb)
      return { /** so far, those are params we're learning */
        goalCoeffs: agentCharacteristics.params.goalCoeffs,
        // alpha: agentCharacteristics.params.metaParams.alpha,
        // discountFactor: agentCharacteristics.params.metaParams.discountFactor,
        // lookAhead: agentCharacteristics.params.metaParams.lookAhead,
        mentalEstimations: agentCharacteristics.initialState.mentalEstimations,
        belief: agentCharacteristics.initialState.belief
        // metaParams: agentCharacteristics.params.metaParams
      }
    })
    // display("joint posterior computed")
    /** TODO: should try this without marginalising */
    let posterior = {
      name: prior.name,
      goalCoeffsBelief: marginalize(jointPosterior, 'goalCoeffs'),
      metaParamsBelief: {
        // alpha: marginalize(jointPosterior, 'alpha'),
        alpha: prior.metaParamsBelief.alpha,
        // discountFactor: marginalize(jointPosterior, 'discountFactor'),
        discountFactor: prior.metaParamsBelief.discountFactor,
        // lookAhead: marginalize(jointPosterior, 'lookAhead')
        lookAhead: prior.metaParamsBelief.lookAhead
      },
      /** TOOD: for now, we dont learn agent's state - implement this*/
      beliefBelief: marginalize(jointPosterior, 'belief'),
      mentalEstimationsBelief: marginalize(jointPosterior, function(characteristics) {
        return map(function(deltaDist) {
          return sample(deltaDist)
        }, characteristics.mentalEstimations)
      }),
    }
    display(posterior)
    display("\nPosterior of " + agentID + ": " + beliefOverAgentToString(posterior))
    return posterior
  }

/** This is the 'reduction' function that updates our belief over agent's characteristic
 *  and mental state based on their observed action.
 *
 * @param priorAndState
 *   accumulator, consisting of
 *   - prior - i.e., belief about agent's characteristics & mental state, of the form
 *      {
 *        investor: {
 *          name: <name>,
 *          goalCoeffsBelief: <distribution>,
 *          metaParamsBeief: <distribution>,
 *          beliefBelief: array of <distribution>, indexed by agentID,
 *          mentalEstimationsBelief: array of <distribution>, indexed by mentalEstimation index
 *        },
 *        investee: {..}
 *      }
 *   - state - current state of the game
 * @param roundData
 *   an array recording invested and returned amount
 * @returns
 *   an updated accumulator, where belief is updated in bayesian manner and state
 *   according to transition function
 */
  let processRound = function(priorAndState, roundData) {
    let investorID = roundData[0]
    let investeeID = roundData[1]
    let investedAmount = roundData[3]
    let returnedAmount = roundData[4]

    let prior = priorAndState[0]
    let state = priorAndState[1]

    display(stringInABox("Process round " + roundData[2]))
    display("investment: " + investedAmount + ", returned: " + returnedAmount + " at state " + stateToString(state))

    let priorFullInvestorBeliefBelief = prior.investor.beliefBelief
    let investorPrior = extend(prior.investor, {beliefBelief: prior.investor.beliefBelief[investeeID]})
    let investorPosteriorSimple = updatePrior(investorPrior, 'investor', investedAmount, state)
    let posteriorFullInvestorBeliefBelief = replace(priorFullInvestorBeliefBelief, investeeID, investorPosteriorSimple.beliefBelief)
    let investorPosterior = extend(investorPosteriorSimple, {beliefBelief: posteriorFullInvestorBeliefBelief})

    let nextState = transitionFn(state, investedAmount)

    let priorFullInvesteeBeliefBelief = prior.investee.beliefBelief
    let investeePrior = extend(prior.investee, {beliefBelief: prior.investee.beliefBelief[investorID]})
    let investeePosteriorSimple = updatePrior(investeePrior, 'investee', returnedAmount, nextState)
    let posteriorFullInvesteeBeliefBelief = replace(priorFullInvesteeBeliefBelief, investorID, investeePosteriorSimple.beliefBelief)
    let investeePosterior = extend(investeePosteriorSimple, {beliefBelief: posteriorFullInvesteeBeliefBelief})

    let finalState = transitionFn(nextState, returnedAmount)

    let posterior =  {
      investor: investorPosterior,
      investee: investeePosterior
    }

    display("Round " + roundData + " processed.")
    return [posterior, finalState]
  }

  let processOnePlay = function(playersAndGameStateTable, play) {
    let players = playersAndGameStateTable[0]
    let gameStateTable = playersAndGameStateTable[1]
    if (play.length == 0) {
      return players
    }
    let investorID = play[0][0]
    let investeeID = play[0][1]
    let prior = {
      investor: players[investorID],
      investee: players[investeeID]
    }
    let posteriorAndFinalState = reduceL(processRound, [prior, csmg.initialState], play)
    let posterior = posteriorAndFinalState[0]
    let finalState = posteriorAndFinalState[1]
    let updatedPlayers = replace(replace(players, investorID, posterior.investor), investeeID, posterior.investee)
    let updatedGameStateTable = updateTable(gameStateTable, investorID, investeeID, finalState)
    return [updatedPlayers, updatedGameStateTable]
  }
  // return posterior(players, iterations, 0)

  /** Create a table to store game state where interaction between agents finished */
  let n = players.length
  let gameStateTable = zeroMatrixAsArray([n, n])
  return reduceL(processOnePlay, [players, gameStateTable], data)
}

/** compute posterior based on available data */
let posteriorAndGameState = posteriorAndGameState(players, data)
let playersPosterior = posteriorAndGameState[0]
let gameStateTable = posteriorAndGameState[1]
display(playersPosterior)

/** posterior has the following format
 * {
 *   investor: {
 *     name: <>,
 *     goalCoeffsBelief: <>,
 *     metaParamsBelief: {
 *       alpha: <>,
 *       discountFactor: <>,
 *       lookAhead: <>
 *     },
 *     beliefBelief: <>,
 *     mentalEstimationsBelief: prior.mentalEstimationsBelief,
 *   }
 * }
 */


/*******************************
 *     PREDICTION PHASE        *
 ******************************/


/**
 * At this point we have 'posterior' which describes our belief about each agent's
 * characteristics and mental state.
 * We now want to use this acquired knowledge to predict actions of agents.
 * We will read another file that contains agents' transfers, but we don't read
 * the transfers themselves; instead we try to predict them and record our predictions
 * vs actual transfers
 */

/** First, read the data (expected --predict) from the file and save in an array as usual */
let predictFilename = argv.predict
if (predictFilename === undefined) {
  error("Please specify a prediction file name using --predict <filename> command line")
}

let allLines = fs.read(predictFilename).split('\n')
/** Filter out comments */
let lines = filter(isRelevant, allLines)
let predictionData = processDataLines(lines)
/** predictionData is an array of 'plays', where each play is a sequence
 * of rounds between the same players, where each 'round' consists
 * of ids of players, roundNo and transfers, e.g. format:
 * [[[1,2,1,5,4],...,[1,2,8,0,0]],[1,3,1,7,8],...,[1,3,8,4,6],...]
 *   \                         /  \  round /
 *    \       one play        /    \      /
 */

/**
 * We now want to process all the transfers and compare them with our predictions
 */

// let investorCharacteristicsBelief = posterior.investor
// let investeeCharacteristicsBelief = posterior.investee

let computePredictedTransferDistribution = function(playerCharacteristicsBelief, role, state) {
  let dist = Infer({ method: 'enumerate'}, function() {
    let agentCharacteristics = sampleAgentCharacteristicsFromBelief(playerCharacteristicsBelief)
    let agent = makeAgent(agentCharacteristics.params, role, agentCharacteristics.initialState, csmg)
    let action = sampleAction(agent, state)
    return action
  })
  return dist
}

/** predictOneRound
 *
 * @param predictionsAndState | consists of an array of predictions (along with actual transfers)
 *  as well as current state of execution
 * @param roundArray | array recording player ids, round no and transfers for one round
 */
let predictOneRound = function(predictionsAndState, roundArray) {
  let state = predictionsAndState[1]
  let investorId = roundArray[0]
  let investeeId = roundArray[1]
  let roundNo = roundArray[2]
  let investment = roundArray[3]
  let returned = roundArray[4]
  display("predict action (actual was: " + investment + ") of investor at state " + stateToString(state))
  display("playersPosterior[investorId]:")
  // display(playersPosterior[investorId])
  /** The usual trick of retrieving appropriate belief of agent*/
  let investorCharacteristicsBelief = extend(playersPosterior[investorId],
    {beliefBelief: playersPosterior[investorId].beliefBelief[investeeId]})
  let predictedInvestmentDist = computePredictedTransferDistribution(investorCharacteristicsBelief, 'investor', state)
  display(predictedInvestmentDist)

  let nextState = transitionFn(state, investment)
  display("predict action (actual was: " + returned + ") of investee at state " + stateToString(nextState))
  display("playersPosterior[investorId]:")
  // display(playersPosterior[investeeId])
  let investeeCharacteristicsBelief = extend(playersPosterior[investeeId],
    {beliefBelief: playersPosterior[investeeId].beliefBelief[investorId]})
  let predictedReturnDist = computePredictedTransferDistribution(investeeCharacteristicsBelief, 'investee', nextState)
  display(predictedReturnDist)

  let finalState = transitionFn(nextState, returned)

  let pastPredictions = predictionsAndState[0]
  let prediction = [roundNo,
    [predictedInvestmentDist, investment], [predictedReturnDist, returned]]
  let updatedPredictions = pastPredictions.concat([prediction])

  display("updated predictions:\n")
  display(updatedPredictions)
  return [updatedPredictions, finalState]
}

/** predictOnePlay predicts
 *
 * @param acc - records transfers and predictions made so far
 * @param playArray - an array consisting of round arrays
 */
let predictOnePlay = function(predictionsAndGameStateTable, playArray) {
  if (playArray.length == 0) {
    return predictionsAndGameStateTable
  }
  let investorId = playArray[0][0]
  let investeeId = playArray[0][1]
  let pastPredictions = predictionsAndGameStateTable[0]
  let gameStateTable = predictionsAndGameStateTable[1]
  let startingState = gameStateTable[investorId][investeeId]
  let predictionsAndFinalState = reduceL(predictOneRound, [[], startingState], playArray)
  let predictions = predictionsAndFinalState[0]
  let finalState = predictionsAndFinalState[1]
  let updatedPredictions = pastPredictions.concat([[investorId, investeeId, predictions]])
  let updatedGameStateTable = updateTable(gameStateTable, investorId, investeeId, finalState)
  return [updatedPredictions, updatedGameStateTable]
}

let predictionsAndGameState = reduceL(predictOnePlay, [[], gameStateTable], predictionData)

/*******************************
 *     EVALUATION PHASE        *
 ******************************/


/** predictions are grouped by player pairs, where for each player pair,
 * an array of pairs <predictionDist, observedAction> is recorded
 * eg array of triples [<investorId>, <investeeId>, <playPredictions>],
 * where
 * playPredictions is array of 'roundPrediction' triples
 * [
 *   roundNo,
 *   [<investmentPrediction>, <actualInvestment>],
 *   [<returnPrediction>, <actualReturn>]
 * ]
 */
let predictions = predictionsAndGameState[0]
display("\n\n\nPREDICTIONS:")
display(predictions)
/**
 * Each play prediction, i.e. a sequence of round prediction for two players,
 * will be processed as follows:
 * 1. Apply evaluation metrics to each round, separately for investment and return
 * 2. Aggregate each evaluation metric for investments and returns
 */


/**
 *
 * @param roundPrediction | a triple see above
 */
let describeRoundPrediciton = function(roundPrediction) {

}

/** evaluatePrediction | this function simply applies all evaluation metrics
 * to a given prediction
 *
 * @param investment
 * @param investmentDistribution
 * @returns and array of evaluation, where each evaluation is an object
 * {
 *   name,
 *   score
 * }
 */
let evaluatePrediction = function(investmentDistribution, investment) {
  let f = function(evaluationMetric) {
    let evaluationFunction = evaluationMetric.evaluatePrediction
    display("investment distribution")
    display(investmentDistribution)
    return {
      name: evaluationMetric.name,
      score: evaluationFunction(investmentDistribution, investment)
    }
  }
  return map(f, evaluationMetrics)
}

/**
 *
 * @param roundPrediction @type Triple<@int, Pair<@dist, @int>, Pair<@dist, @int>>
 *
 * @returns triple [roundNo, invest evaluations array, return evaluations array]
 * where evaluations array consists of objects like
 * {
 *   name: 'probabilisticMSE',
 *   score: 3.45
 * }
 */
let evaluateRoundPrediction = function(roundPrediciton) {
  /** first extract triple elements */
  let roundNo = roundPrediciton[0]
  let investmentDist = roundPrediciton[1][0]
  let investment = roundPrediciton[1][1]
  let returnDist = roundPrediciton[2][0]
  let returned = roundPrediciton[2][1]
  let investmentEvaluations = evaluatePrediction(investmentDist, investment)
  let returnEvaluations = evaluatePrediction(returnDist, returned)
  return [roundNo, investmentEvaluations, returnEvaluations]
}

/**
 *
 * @param evaluations | an array of Triples of roundNo + evaluation arrays
 */
let aggregateDescription = function(evaluations) {
  let getExtractorForEvaluation = function(atIndex, named) {
    let extractor = function(evaluationArray) {
      let evaluation = evaluationArray[atIndex]
      console.assert(evaluation.name == named)
      return evaluation.score
    }
    return extractor
  }

  let f = function(index, evaluationMetric) {
    let name = evaluationMetric.name
    let aggregator = evaluationMetric.aggregateEvaluations
    let investmentEvaluations = map(extractElementAtIndex(1), evaluations)
    let investmentEvaluationScores = map(getExtractorForEvaluation(index, name), investmentEvaluations)
    let investmentsAggregateScore = aggregator(investmentEvaluationScores)

    let returnEvaluations = map(extractElementAtIndex(2), evaluations)
    let returnEvaluationScores = map(getExtractorForEvaluation(index, name), returnEvaluations)
    let returnAggregateScore = aggregator(returnEvaluationScores)

    let totalAggregateScore = aggregator(investmentEvaluationScores.concat(returnEvaluationScores))

    return "Metric: " + name + "\nInvestments prediction aggregate score: " + investmentsAggregateScore +
      "\nReturns prediction aggregate score: " + returnAggregateScore + "\nTotal prediction aggregate score: " +
      totalAggregateScore
  }
  let metricDescriptions = mapIndexed(f, evaluationMetrics)
  return concatStrings(metricDescriptions)
}

/** describePlayPredictions
 *
 * @param playPrediction @type Triple<@int, @int, Array<Triple<@int, Pair<@dist, @int>, Pair<@dist, @int>>>>
 * @returns {string} describing
 */
let describePlayPredictions = function(playPrediction) {
  display(playPrediction)
  let investorId = playPrediction[0]
  let investeeId = playPrediction[1]
  let playPredictions = playPrediction[2]
  let playEvaluations = map(evaluateRoundPrediction, playPredictions)
  let playDescription = aggregateDescription(playEvaluations)
  // let playDescription = map(describeRoundPrediction, playPredictions)
  return "Play between agent " + investorId + " and " + investeeId + ":\n" + playDescription
}

let descriptions = map(describePlayPredictions, predictions)
let descriptionsConcated = concatStrings(descriptions)
display(descriptionsConcated)
