/** Simulations for the trust game */

/** To run:
  $ webppl examples/trustgame/src/simulations.wppl --require . --require examples/trustgame [--] [--help] [--experiment <experimentID>] [--scenario <scnearioID>] [--runs <numberOfRuns>] [--reps <numberOfReps>]
 */


/** Callbacks */
let printTrusts = function(game, agents, state, names) {
  let f = function(agentID, agent) {
    let mentalState = agent.mentalState
    let mentalRewards = agent.mentalRewards
    let trust = mentalState(state,0)
    let trustEstimation = mentalRewards(state)[0]
    return names[agentID] + ":\n  trust: " + trust +
      "\n  trust estimation: " + trustEstimation
  }
  explain(mapIndexed(f, agents).join("\n"))
}

let callbacks = {
  setup: printTrusts,
  periodic: printTrusts
}

/** Returns an array of agent setups where meta params and meta param
 * estimations are fixed to (100, 0.8, 2/3)
 */
let getAgents = function(goalCoeffs, beliefs, trustExps) {
  let aliceParams = generateParams(goalCoeffs[0], 100, 0.8, 2, false)
  let aliceInitialStateTmp =
    generateInitialState(0, 2, 100, 0.8, 3)
  let aliceInitialState =
    extend(aliceInitialStateTmp
      ,
      {
        belief: arrayReplace(aliceInitialStateTmp.belief, 1, beliefs[0]),
        mentalEstimations:
          arrayReplace(aliceInitialStateTmp.mentalEstimations, 1, [Delta({v: trustExps[0]})])
      }
    )
  let bobParams = generateParams(goalCoeffs[1], 100, 0.8, 3, false)
  let bobInitialStateTmp =
    generateInitialState(1, 2, 100, 0.8, 2)
  let bobInitialState =
    extend(bobInitialStateTmp
      ,
      {
        belief: arrayReplace(bobInitialStateTmp.belief, 0, beliefs[0]),
        mentalEstimations:
          arrayReplace(bobInitialStateTmp.mentalEstimations, 0, [Delta({v: trustExps[1]})])
      }
    )
  let alice = {
    params: aliceParams,
    initialState: aliceInitialState
  }
  let bob = {
    params: bobParams,
    initialState: bobInitialState
  }
  let agents = [alice, bob]
  return agents
}

let names = ['alice','bob']

/** Setup game structure */
let gameSpecificParams = {
  endowments : {
    investor: 4,
    investee: 0
  },
  k: 2
}

let options = {
  horizon: 10,
  beliefRepresentation: 'dirichlet'
}

let testExperiment = function() {
  /**
   * This is a basic scenario with standard parameters
   */
  let getScenarioBasic = function() {
    let name = "Basic (high trust, high trustworthiness)"
    let bobParams = generateParams([0.3,0.7], 100, 0.8, 3, true)
    let bobInitialStateTmp =
      generateInitialState(1, 2, 100, 0.8, 2)
    let bobInitialState =
      extend(bobInitialStateTmp
        ,
        {
          belief: arrayReplace(bobInitialStateTmp.belief, 0, [1,3]),
          mentalEstimations:
            arrayReplace(bobInitialStateTmp.mentalEstimations, 0, [Delta({v: 0.7})])
        }
        )
    let aliceParams = generateParams([0.3,0.7], 100, 0.8, 2, true)
    let aliceInitialStateTmp =
      generateInitialState(0, 2, 100, 0.8, 3)
    let aliceInitialState =
      extend(aliceInitialStateTmp
        ,
        {
          belief: arrayReplace(aliceInitialStateTmp.belief, 1, [1,3]),
          mentalEstimations:
            arrayReplace(aliceInitialStateTmp.mentalEstimations, 1, [Delta({v: 0.7})])
        }
      )
    let alice = {
      params: aliceParams,
      initialState: aliceInitialState
    }
    let bob = {
      params: bobParams,
      initialState: bobInitialState
    }
    let agents = [alice, bob]
    return {name, agents, options, gameSpecificParams}
  }

  let getZeroLookaheadScenario = function() {
    let name = "Basic (high trust, high trustworthiness)"
    let bobParams = generateParams([0.3,0.7], 100, 0.8, 3, false)
    let bobInitialStateTmp =
      generateInitialState(1, 2, 100, 0.8, 2)
    let bobInitialState =
      extend(bobInitialStateTmp
        ,
        {
          belief: arrayReplace(bobInitialStateTmp.belief, 0, [1,3]),
          mentalEstimations:
            arrayReplace(bobInitialStateTmp.mentalEstimations, 0, [Delta({v: 0.7})])
        }
      )
    let aliceParams = generateParams([0.3,0.7], 100, 0.8, 2, false)
    let aliceInitialStateTmp =
      generateInitialState(0, 2, 100, 0.8, 3)
    let aliceInitialState =
      extend(aliceInitialStateTmp
        ,
        {
          belief: arrayReplace(aliceInitialStateTmp.belief, 1, [1,3]),
          mentalEstimations:
            arrayReplace(aliceInitialStateTmp.mentalEstimations, 1, [Delta({v: 0.7})])
        }
      )
    let alice = {
      params: aliceParams,
      initialState: aliceInitialState
    }
    let bob = {
      params: bobParams,
      initialState: bobInitialState
    }
    let agents = [alice, bob]
    return {name, agents, options, gameSpecificParams}
  }

  let getScenarioWeird = function() {
    let name = "this scenario was causing trust dynamics to fail before"
    let bobParams = generateParams([0.1767,0.8233], 100, 0.8, 3, false)
    let bobInitialStateTmp =
      generateInitialState(1, 2, 100, 0.8, 2)
    let bobInitialState =
      extend(bobInitialStateTmp
        ,
        {
          belief: arrayReplace(bobInitialStateTmp.belief, 0, [2,2]),
          mentalEstimations:
            arrayReplace(bobInitialStateTmp.mentalEstimations, 0, [Delta({v: 0.9602})])
        }
      )
    let aliceParams = generateParams([0.1767,0.8233], 100, 0.8, 2, false)
    let aliceInitialStateTmp =
      generateInitialState(0, 2, 100, 0.8, 3)
    let aliceInitialState =
      extend(aliceInitialStateTmp
        ,
        {
          belief: arrayReplace(aliceInitialStateTmp.belief, 1, [2,2]),
          mentalEstimations:
            arrayReplace(aliceInitialStateTmp.mentalEstimations, 1, [Delta({v: 0.8192})])
        }
      )
    let alice = {
      params: aliceParams,
      initialState: aliceInitialState
    }
    let bob = {
      params: bobParams,
      initialState: bobInitialState
    }
    let agents = [alice, bob]
    return {name, agents, options, gameSpecificParams}
  }

  let getAnotherScenario = function() {
    let name = "this scenario was causing trust dynamics to fail before"
    let bobParams = generateParams([0.86,0.14], 100, 0.8, 3, false)
    let bobInitialStateTmp =
      generateInitialState(1, 2, 100, 0.8, 2)
    let bobInitialState =
      extend(bobInitialStateTmp
        ,
        {
          belief: arrayReplace(bobInitialStateTmp.belief, 0, [1,4]),
          mentalEstimations:
            arrayReplace(bobInitialStateTmp.mentalEstimations, 0, [Delta({v: 0.415})])
        }
      )
    let aliceParams = generateParams([0.94,0.06], 100, 0.8, 2, false)
    let aliceInitialStateTmp =
      generateInitialState(0, 2, 100, 0.8, 3)
    let aliceInitialState =
      extend(aliceInitialStateTmp
        ,
        {
          belief: arrayReplace(aliceInitialStateTmp.belief, 1, [1,4]),
          mentalEstimations:
            arrayReplace(aliceInitialStateTmp.mentalEstimations, 1, [Delta({v: 0.44})])
        }
      )
    let alice = {
      params: aliceParams,
      initialState: aliceInitialState
    }
    let bob = {
      params: bobParams,
      initialState: bobInitialState
    }
    let agents = [alice, bob]
    return {name, agents, options, gameSpecificParams}
  }

  let getScenarios = function() {
    return [getScenarioBasic(), getZeroLookaheadScenario(), getScenarioWeird(), getAnotherScenario()]
  }

  return {
    name: "testExperiment",
    desc: "random collection of test scenarios",
    getScenarios,
    names,
    callbacks
  }
}()

let varyTrustExperiment = function() {

  /** Auxiliary */
  let computeAverageTransfers = function(scenarioTrajectories) {
    /** we know scenarioTrajectories should only have one element since
     * we run each scenario once */
    let avgInvest = listMean(map(function(x) { return x[1]},
      filter(function(x) {return _.isEqual(x[0].turn, 'investee')},
        scenarioTrajectories[0])))
    let avgRet = listMean(map(function(x) { return x[1]},
      filter(function(x) {return _.isEqual(x[0].turn, 'investor')},
        scenarioTrajectories[0].slice(0,-1))))
    return [avgInvest, avgRet]
  }

  let configurations = [
    ["Very low trust", [4,1]],
    ["Low trust", [3,2]],
    ["Medium trust", [2,2]],
    ["High trust", [2,3]],
    ["Very high trust", [1,4]]
  ]

  let getScenarios = function() {
    return map(function(config) {
      return {
        name: config[0]
      }
    }, configurations)
  }

  let run = function(params) {
    let reps = params.reps || 20
    assertHasType(reps, INT_TYPE, "varyTrustExperiment: run(): " +
      "reps has wrong type, expected INT, found: " + reps)
    assert(reps > 0, "varyTrustExperiment: run(): reps should " +
      "be a positive integer; found: " + reps)
    let getSetTrustScenarios = function(name, initialBelief) {
      let arrayOfAgentsConfigurations = repeat(reps, function() {
        let a = uniform(0,1)
        let b = uniform(0,1)
        let beliefs = [initialBelief,initialBelief]
        let trustExps = [uniform(0,1), uniform(0,1)]
        return getAgents([[a, 1-a], [b,1-b]], beliefs, trustExps)
      })
      return map(function(agents) {
        return {name, agents, options, gameSpecificParams}
      }, arrayOfAgentsConfigurations)
    }

    let averageTransfers = reduceL(function(acc, config) {
      let scenarios = getSetTrustScenarios(config[0], config[1])
      display("Simulating configuration: " + config[0] + "...")
      let trajectories = simulateScenarios(
        scenarios, makeTrustCSMG, ['alice','bob'], callbacks)
      critical(scenariosTrajectoriesToScenariosString(trajectories))
      let averages = map(computeAverageTransfers, trajectories)
      let avgInvest = listMean(map(fst, averages))
      let avgReturn = listMean(map(snd, averages))
      let summary = [config[0], [avgInvest, avgReturn], trajectories]
      // display("Configuration " + config[0] + " simulated.")
      return acc.concat([summary])
    }, [], configurations)

    reduceL(function(acc, avgTransfers) {
      display(avgTransfers[0] + ": " + avgTransfers[1][0] + " on average " +
        "invested, " + avgTransfers[1][1] + " on average returned")
    }, [], averageTransfers)

    return arrayConcat(map(function(avgTransfer) {
      return avgTransfer[2]
    }, averageTransfers))
  }

  let getParams = function() {
    if (isDefined(argv.reps)) {
      let repsStr = argv.reps
      let reps = parseInt(repsStr)
      assert(reps > 0, "varyTrustExperiment: getParams(): reps " +
        "must be positive")
      return {
        reps
      }
    }
    return {}
  }

  return {
    name: "varyTrustExperiment",
    desc: "This experiment investigates how initial trust affects" +
      " amounts sent - this is H2 from QEST paper." +
      "\nThe scenarios are categorized by initial level of trust between" +
      " agents (both agents start with the same belief)" +
      "\nNote that this " +
      "is a custom experiment and it requires [--reps <numberOfReps>] " +
      "passed in command line - this is the number of repetitions each " +
      "scenario will be run (with random agents' characteristics). If not " +
      "passed, it defaults to 20",
    run,
    getParams,
    getScenarios
  }
}()

let conmanNoncognitiveExperiment = function() {

  /** conman will be a non cognitive agent who uses a strategy.
   * the strategy will be to make high returns initially if the
   * investments are low, but when investments get high, keep the
   * money. this strategy is encoded below */
  let conmanReturn = function(state) {
    let lastInvestment = state.investments[0]
    let iteration = state.investments.length
    if (lastInvestment >= 3) return 0
    if (iteration <= 2) return 2 * lastInvestment
    return Math.max(0, lastInvestment - 1)
  }

  let run = function() {
    let aliceParams = generateParams([0.5,0.5], 100, 0.8, 2, false)
    let aliceInitialStateTmp =
      generateInitialState(0, 2, 100, 0.8, 3)
    let aliceInitialState =
      extend(aliceInitialStateTmp
        ,
        {
          belief: arrayReplace(aliceInitialStateTmp.belief, 1, [2,2]),
          mentalEstimations:
            arrayReplace(aliceInitialStateTmp.mentalEstimations, 1, [Delta({v: 0.7})])
        }
      )
    let gameSetup = makeTrustCSMG(gameSpecificParams)
    let game = makeCSMG(gameSetup, options)
    let turn = game.API.turn
    let transitionFn = game.transitionFn
    let alice = makeAgent(aliceParams, 0, aliceInitialState, game)
    let act = alice.act
    let simul = function(state, stepsLeft) {
      if (stepsLeft > 0) {
        let actionTaker = turn(state)
        let action = (actionTaker === 0) ? sample(act(state)) : conmanReturn(state)
        explain('\nAction computed: ' + action)
        let nextState = sample(transitionFn(state, action))
        return [[state, action]].concat(simul(nextState, stepsLeft - 1))
      }
      return []
    }
    let initialState = game.initialState
    let trajectory = simul(initialState, options.horizon)
    display(map(snd, trajectory))
  }

  let getScenarios = function() {
    return [{name: "bob has a strategy, alice is uniform"}]
  }

  return {
    name: "conmanNoncognitiveExperiment",
    desc: "This experiment studies behaviour of a cognitive agent (Alice)" +
      " when Bob is a (non-cognitive) con man, which means Bob tries to " +
      "trick Alice into trusting him and then keep a lot of money",
    run,
    getScenarios
  }
}()

let conmanCognitiveExperiment = function() {

  /** bob knows game lasts for 3 rounds */
  let gameSpecificParams = extend(gameSpecificParams,
    {
      horizon: {
        investee: 3
      }
    })

  let options = extend(options,
    {
      horizon: 6
    })

  let getGameSpecificParams = function(horizon) {
    return extend(gameSpecificParams,
      {
        horizon: {
          investee: horizon
        }
      })
  }

  /** horizon given as number of rounds */
  let getOptions = function(horizon) {
    return extend(options,
      {
        horizon: 2 * horizon
      })
  }

  let getAlice = function(goalCoeffs, lookAhead, belief, trustEst) {
    let params = generateParams([goalCoeffs[0],0,goalCoeffs[1]], 100, 0.8, lookAhead, false)
    let initialStateTmp = generateInitialState(0, 2, 100, 0.8, 1)
    let initialState =
      extend(initialStateTmp
        ,
        {
          belief: arrayReplace(initialStateTmp.belief, 1, belief),
          mentalEstimations:
            arrayReplace(initialStateTmp.mentalEstimations, 1, [Delta({v: trustEst})])
        }
      )
    let alice = {
      params,
      initialState
    }
    return alice
  }

  let getBob = function(lookAhead, trustEst) {
    let params = generateParams([1,0], 100, 1, 5, false)
    let initialStateTmp = generateInitialState(1, 2, 100, 0.8, 1)
    let initialState =
      extend(initialStateTmp
        ,
        {
          belief: arrayReplace(initialStateTmp.belief, 0, [1,20,1]),
          mentalEstimations:
            arrayReplace(initialStateTmp.mentalEstimations, 0, [Delta({v: trustEst})])
        }
      )
    let bob = {
      params,
      initialState
    }
    return bob
  }

  let getParams = function() {
    if (isDefined(argv.reps)) {
      let repsStr = argv.reps
      let reps = parseInt(repsStr)
      assert(reps > 0, "conmanCognitiveExperiment: getParams(): reps " +
        "must be positive")
      return {
        reps
      }
    }
    return {}
  }

  let getScenarios = function(params) {
    /** Now we check whether a fair agent can punish a con man who tries
     * to take advantage of them. H3 alternative */
    // let alice = getAlice([0.5,0.5],2,[1,1],0.75)
    // let bob = getBob(5, 0.5)

    let randomScenario = function() {
      let moneyCoeff = uniform(0,1)
      let trustCoeff = 1 - moneyCoeff
      let goalCoeffs = [moneyCoeff, trustCoeff]
      let b1 = uniform(1, 5)
      let b2 = 5 - b1
      let belief = [b1, b2]
      let trustEst = uniform(0,1)
      let alice = getAlice(goalCoeffs, 2, belief, trustEst)
      let bob = getBob(5, 0.5)
      let name = "Alice:\n" +
        "goalCoeffs: [" + moneyCoeff + "," + trustCoeff + "]\n" +
        "belief: [" + b1 + "," + b2 + "]\n" +
        "trustEst: " + trustEst

      return {
        name,
        agents: [alice, bob],
        options: getOptions(3),
        gameSpecificParams: getGameSpecificParams(3)
      }
    }

    let reps = params.reps || 20
    return repeat(reps, randomScenario)
  }

  /** this function will be called once all simulations are complete.
   * it computes money that agents end up with for each scenario and
   * averages over all scenarios
   */
  let wrapUp = function(trajectoriess) {
    let investorEndowment = gameSpecificParams.endowments.investor
    let investeeEndowment = gameSpecificParams.endowments.investee
    let k = gameSpecificParams.k
    let scenariosSummaries = map(function(scenarioTrajectories) {
      let scenarioTrajectory = scenarioTrajectories[0]
      let actions = map(snd, scenarioTrajectory.slice(0,-1))
      let money = reduceL(function(acc, action) {
        if (acc[0] % 2 === 0) {
          /** this action in alice's */
          let alice = acc[1][0] + investorEndowment - action
          let bob = acc[1][1] + investeeEndowment + action * k
          return [acc[0]+1, [alice, bob]]
        }
        /** this action is bob's */
        let alice = acc[1][0] + action
        let bob = acc[1][1] - action
        return [acc[0] + 1, [alice,bob]]
      }, [0,[0,0]], actions)[1]
      return {
        actions,
        money
      }
    }, trajectoriess)
    let scenarioSummariesStrings =
      mapIndexed(function(i, scenarioSummary) {
        return "Scenario " + i + ":\ntrace:" + toString(scenarioSummary.actions)
         + "\nfinal monies: " + toString(scenarioSummary.money)
      }, scenariosSummaries)
    critical(stringInABox("Results of cognitive conman experiment:"))
    critical(scenarioSummariesStrings.join("\n"))
    let avgMoney = function(i, scenariosSummaries) {
      /** filter scenarios of all zero transfers */
      let filteredScenariosSummaries = filter(function(scenarioSummary) {
        return !all(function(action) { return action === 0}, scenarioSummary.actions)
      }, scenariosSummaries)
      return listMean(map(function(scenarioSummary) {
        return scenarioSummary.money[i]
      }, filteredScenariosSummaries))
    }
    let avgAlice = avgMoney(0, scenariosSummaries)
    let avgBob = avgMoney(1, scenariosSummaries)
    critical("\nAlice's average money: " + avgAlice)
    critical("Bob's average money: " + avgBob)
  }

  return {
    name: "conmanCognitiveExperiment",
    desc: "This experiment simulates a play between a standard " +
      "cognitive agent as Alice (with randomised parameters and state) " +
      "and a con man as Bob. Interestingly, con man is also modeled as " +
      "a cognitive agent, but slightly 'tweaked':\n" +
      "- he knows the horizon of the game\n" +
      "- he only cares about the money ([1,0] - goal coeffs vector)\n" +
      "- he has a different model of trust than Alice (see code for " +
      "detail but gist of it is that he assumes the bigger the transfer," +
      " the more Alice's trust increases)\n" +
      "- he assumes that Alice's investment will be proportional to her" +
      " trust -- so more trust means higher investments\n" +
      "- he has a long lookahead to allow longer term planning\n" +
      "Our expectation is that given the above properties, Bob will " +
      "figure out that it's in his interest to increase Alice's trust " +
      "by being very cooperative initially and then defect on the last " +
      "move (assuming the game last for 3,4 rounds). " +
      "" +
      "Note that the scenarios are randomised so the values printed " +
      "are just a representation and they won't be the same as the " +
      "values used for experiments",
    getScenarios,
    callbacks,
    names,
    getParams,
    wrapUp
  }
}()

let mturkExperiment = function() {

  let getPositiveNormalDiscretised = function(mean, dev, samples) {
    let generate = function() {
      let s = gaussian({mu: mean, sigma: dev})
      if (s > 0) return s
      return generate()
    }
    return Infer({method: 'forward', samples: samples, model: function() {
        return generate()
      }});
  }

  let generateBotInitialState = function(botID, alphaEst, discountEst, lookAheadEst, initialBelief, trustEst) {
    let isInvestor = botID === 0
    let belief = isInvestor ? [undefined, initialBelief] : [initialBelief, undefined]
    let mentalEstimations = isInvestor ? [undefined, [trustEst]] : [[trustEst], undefined]
    let alpha = isInvestor ? [undefined, alphaEst] : [alphaEst, undefined]
    let lookAhead = isInvestor ? [undefined, lookAheadEst] : [lookAheadEst, undefined]
    let discountFactor = isInvestor ? [undefined, discountEst] : [discountEst, undefined]
    return {
      belief,
      mentalEstimations,
      metaParamsEstimations: {
        alpha, lookAhead, discountFactor
      }
    }
  }

  let generateParticipantInitialState = function(participantID) {
    let initialBelief = [1,5]
    let alphaEst = Delta({v: 10})
    let discountEst = Delta({v:0.8})
    let lookAheadEst = Delta({v: 2})
    // let trustEst = Delta({v: uniform({a: 0, b: 1})})
    let trustEst = Delta({v: 0.1})
    return generateBotInitialState(participantID, alphaEst, discountEst, lookAheadEst, initialBelief, trustEst)
  }

  /**
   *
   * @param role of the bot (0 (investor) or 1 (investee))
   * @param goalCoeffs
   * @param lookAhead
   * @param belief
   * @param trustEstimation
   * @param alphaEst
   * @param lookAheadEst
   */
  // let getBot = function(role, goalCoeffs, lookAhead, belief, trustEst, alphaEst, lookAheadEst) {
  let getBot = function(role, goalCoeffs) {
    // let mean = categorical({vs: [0,2,6,10,14,18,22]})
    let mean = 50
    // let dev = categorical({vs: [4,8]})
    let dev = 8
    let alphaEst = role === INVESTEE ?
      getPositiveNormalDiscretised(mean, dev, 1) :
      getPositiveNormalDiscretised(mean, dev, 3)
    // let alphaEst = getPositiveNormalDiscretised(mean, dev, 1)
    // let alphaEst = Delta({v: 100})
    // let lookAhead = categorical({vs: [1,2,3]})
    let lookAhead = role === INVESTOR ? 2 : 4
    let belief = categorical({ vs: [[1,1],[1,2],[1.25,1.75],[1.75,1.25],[2,1],[1.5,1.5]]})
    // let belief = [1.75,1.25]
    // let belief = [2,1]
    // let belief = [1,4]
    let trustEst = Delta({v: categorical({vs: [.1,.3,.5,.7,.9]})})
    // let trustEst = Delta({ v: 0.1 })
    let lookAheadEst = role === INVESTEE ? Delta({v: 4}) :
      Categorical({ps: [1/14,2/14,5/14,5/14,1/14], vs: [0,1,2,3,4]})
    let botParams = generateParams(goalCoeffs, 1000, 0.8, lookAhead, true)
    let botInitialState = generateBotInitialState(role, alphaEst, Delta({v: 0.8}), lookAheadEst, belief, trustEst)
    return {
      params: botParams,
      initialState: botInitialState
    }
  }

  let INVESTOR = 0
  let INVESTEE = 1

  let generateParticipant = function(role) {
    // let moneyCoeff = uniform({a:0, b:1})
    let moneyCoeff = 0
    let alpha = uniform({a:5, b:30})
    let lookAhead = categorical({vs: [2,3,4]})
    let params = generateParams([moneyCoeff, 1-moneyCoeff], alpha, 0.8, lookAhead, true)
    let initialState = generateParticipantInitialState(role)
    return {
      params, initialState
    }
  }

  let setup = function(game, agents, state, names) {
    let printAgent = function(agent) {
      display(agent)
      display(agent.params)
      display(agent.initialState)
    }
    display("Agent 0: ")
    printAgent(agents[0])
    display("Agent 1: ")
    printAgent(agents[1])
  }

  let thisCallbacks = extend(callbacks, { setup })

  let names = ["bot", "participant"]

  let getGreedyBotAsInvestorScenario = function() {
    let bot = getBot(INVESTOR, [.8,.2])
    let participant = generateParticipant(INVESTEE)
    let agents = [bot, participant]
    let name = "Greedy bot as investor"
    let opts = {
      beliefRepresentation: 'dirichlet',
      horizon: 8
    }
    return {name, agents, names, options: opts, gameSpecificParams}
  }

  let getGreedyBotAsInvesteeScenario = function() {
    let bot = getBot(INVESTEE, [.8,.2])
    let participant = generateParticipant(INVESTOR)
    let agents = [participant, bot]
    let name = "Greedy bot as investee"
    return {name, agents, names: arrayReverse(names), options, gameSpecificParams}
  }

  let getNeutralBotAsInvestorScenario = function() {
    let bot = getBot(INVESTOR, [.5,.5])
    let participant = generateParticipant(INVESTEE)
    let agents = [bot, participant]
    let name = "Neutral bot as investor"
    return {name, agents, names, options, gameSpecificParams}
  }

  let getNeutralBotAsInvesteeScenario = function() {
    let bot = getBot(INVESTEE, [.5,.5])
    let participant = generateParticipant(INVESTOR)
    let agents = [participant, bot]
    let name = "Neutral bot as investee"
    return {name, agents, names: arrayReverse(names), options, gameSpecificParams}
  }

  let getSelflessBotAsInvestorScenario = function() {
    let bot = getBot(INVESTOR, [.3,.7])
    let participant = generateParticipant(INVESTEE)
    let agents = [bot, participant]
    let name = "Selfless bot as investor"
    return {name, agents, names, options, gameSpecificParams}
  }

  let getSelflessBotAsInvesteeScenario = function() {
    let bot = getBot(INVESTEE, [.3,.7])
    let participant = generateParticipant(INVESTOR)
    let agents = [participant, bot]
    let name = "Selfless bot as investee"
    return {name, agents, names: arrayReverse(names), options, gameSpecificParams}
  }

  let getScenarios = function() {
    return [getGreedyBotAsInvestorScenario(), getGreedyBotAsInvesteeScenario(),
            getNeutralBotAsInvestorScenario(), getNeutralBotAsInvesteeScenario(),
            getSelflessBotAsInvestorScenario(), getSelflessBotAsInvesteeScenario()]
  }

  return {
    name: "mturkExperiment",
    desc: "simulates the bot as implemented for the mturk trust game experiment",
    getScenarios,
    callbacks
  }
}()

let predictOtherExperiment = function() {
  let run = function() {
    let botParams = generateParams([0.3,0.7], 100, 0.8, 3, true)
    let botInitialStateTmp =
      generateInitialState(1, 2, 100, 0.8, 2)
    let botInitialState =
      extend(botInitialStateTmp
        ,
        {
          belief: arrayReplace(botInitialStateTmp.belief, 0, [1,3]),
          mentalEstimations:
            arrayReplace(botInitialStateTmp.mentalEstimations, 0, [Delta({v: 0.7})])
        }
      )
    let csmg = makeCSMG(makeTrustCSMG(gameSpecificParams), options)
    let bot = makeAgent(botParams, 1, botInitialState, csmg)
    let act = bot.act
    // let state = csmg.initialState
    let state = {investments: [3], returns: [0], turn: 'investor'}
    let dist = act(state)
    display(discreteDistributionToString(dist, [0,1,2,3,4]))
  }

  // let getParams = function() {
  //   let param1 = argv.param1 /** etc */
  //   return {
  //     param1
  //   }
  // }

  let scenarios = [
    { name: "first" },
    { name: "second" }
  ]

  return {
    name: "predictOtherExperiment",
    desc: "we want to be able to retrieve predictions of one player ",
    run,
    scenarios
  }
}()

let experiments = [testExperiment, varyTrustExperiment,
  conmanNoncognitiveExperiment, conmanCognitiveExperiment,
  mturkExperiment, predictOtherExperiment]

display('processcommandline')
let outcome = processCommandline(makeTrustCSMG, experiments, argv)
// display(arrayToString(outcome.result[0][0]))

