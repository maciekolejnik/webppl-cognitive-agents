/** To run
 $ webppl examples/trustgame/test.wppl --require . --require examples/trustgame
 from the top level directory
 */

/** test trust dynamics model */
let testTrustDynamics = function() {
  let gameSpecificParams = {
    endowments: {
      'investor': 4,
      'investee': 0
    },
    k: 2
  }

  let game = makeTrustCSMG(gameSpecificParams)
  let turn = game.API.turn

  let getState = function(actions) {
    return reduceL(function(state, action) {
      return sample(transitionFn(state, action))
    }, game.initialState, actions)
  }

  let updateTrustEstimation = game.mentalStateDynamics.estimationHeuristicArr[0]
  let transitionFn = game.transitionFn

  let getNewTrust = function(oldTrust, state, action) {
    let actingAgent = turn(getState(state))
    let otherAgent = otherAgentID(actingAgent)
    let nextState = getState(arrayJoin(state, [action]))
    let newTrust = updateTrustEstimation(oldTrust, actingAgent, otherAgent, nextState)
    return newTrust
  }

  let describeTrustUpdate = function(state, action, oldTrust, newTrust) {
    return "after taking action " + action + " in state " +
      arrayToString(state) + " trust changed from " + oldTrust + " to " +
      newTrust
  }

  let assertTrustBetween = function(oldTrust, lo, hi, state, action) {
    let newTrust = getNewTrust(oldTrust, state, action)
    let msg = describeTrustUpdate(state, action, oldTrust, newTrust)
    let failMsg = "FAIL: " + msg +
    ", but it was expected to end up between " + lo + " and " + hi
    let sucMsg = "PASS: " + msg + ", as expected"
    assertBetween(newTrust, lo, hi, failMsg, sucMsg)
  }

  /** check that trust after taking action 'lo' is no more than after action 'hi' */
  let assertTrustNoGreater = function(oldTrust, state, actionLo, actionHi) {
    let newTrustLo = getNewTrust(oldTrust, state, actionLo)
    let newTrustHi = getNewTrust(oldTrust, state, actionHi)
    let failMsg = "FAIL: starting from trust " + oldTrust + " at state " + arrayToString(state) +
      ", action " + actionLo + " should result in no greater trust than action " + actionHi +
      ", but found otherwise: " + newTrustLo + " and " + newTrustHi + ", respectively"
    let sucMsg = "PASS: starting from trust " + oldTrust + " at state " + arrayToString(state) +
      ", action " + actionLo + " results in no greater trust than action " + actionHi +
      ": " + newTrustLo + " <= " + newTrustHi
    assert(newTrustLo <= newTrustHi, failMsg, sucMsg)
  }

  let assertTrustIncreases = function(oldTrust, state, action) {
    let newTrust = getNewTrust(oldTrust, state, action)
    let msg = describeTrustUpdate(state, action, oldTrust, newTrust)
    let failMsg = "FAIL: " + msg + ", i.e., trust didn't increase, " +
      "but it was expected to"
    let sucMsg = "PASS: " + msg + ", i.e., an increase, as expected"
    assert(newTrust > oldTrust, failMsg, sucMsg)
    return newTrust - oldTrust
  }

  let assertTrustDecreases = function(oldTrust, state, action) {
    let newTrust = getNewTrust(oldTrust, state, action)
    let msg = describeTrustUpdate(state, action, oldTrust, newTrust)
    let failMsg = "FAIL: " + msg + ", i.e., trust didn't decrease, " +
      "but it was expected to"
    let sucMsg = "PASS: " + msg + ", i.e., a decrease, as expected"
    assert(newTrust < oldTrust, failMsg, sucMsg)
    return oldTrust - newTrust
  }

  /** first test auxiliary functions */
  let assertInvesteeNicenessBetween = function(history, lo, hi) {
    let niceness = computeInvesteeNicenessAndCertainty(history).value
    let certainty = computeInvesteeNicenessAndCertainty(history).certainty
    let msg = "investee niceness after executing history " + arrayToString(history)
    + " is " + niceness + " (certainty: " + certainty + ")"
    assertBetween(niceness, lo, hi, "FAIL: " + msg + "; expected between " +
      lo + " and " + hi, "PASS: " + msg + ", as expected")
  }

  /** investee niceness */
  assertInvesteeNicenessBetween([[4,0], [4,0]], -1, -1)


  /** below we check that various trust dynamics properties hold */

  /** start with some basic stuff */

  /** start from point of view of investor */

  /** 1. when trust is low, low, but nonzero investment should
   * preserve/slightly increase trust */
  assertTrustBetween(0.2, 0.15, 0.5, [], 1)

  /** 2. when trust is low, it should not go up after a zero investment */
  assertTrustDecreases(0.2, [], 0)

  /** 3. when trust is low, it should go up after a decent investment */
  assertTrustIncreases(0.2, [], 2)

  /** 4. when trust is medium, it should go down quite a bit after a zero investment */
  assertTrustBetween(0.5, 0.1, 0.4, [], 0)

  /** 5. when trust is medium, it should not change too much after an average investment */
  assertTrustBetween(0.5, 0.4, 0.6, [], 2)

  /** 6. when trust is high, it should decrease significantly after a very low investment */
  assertTrustBetween(0.8, 0.2, 0.6, [], 0)
  assertTrustBetween(0.8, 0.2, 0.65, [], 1)

  /** 7. when trust is high, it should be preserved by a high investment */
  assertTrustIncreases(0.8, [], 4)
  assertTrustBetween(0.8, 0.7, 0.9, [], 3)

  /** now consider from point of view of investee */

  /** 1. when trust is low, a decent return should increase it */
  assertTrustIncreases(0.2, [2], 2)

  /** 2. even when trust is low, a small return decreases it */
  assertTrustDecreases(0.2, [2], 0)
  assertTrustBetween(0.2, 0.05, 0.25, [2], 1)

  /** 3. when trust is medium, a low return should decrease it */
  assertTrustDecreases(0.5, [2], 1)

  /** 4. Bigger investment leads to bigger trust */
  assertTrustNoGreater(0.5, [3], 3, 4)

  /** 5. When trust is high, only high investment will lead to an increase */
  assertTrustDecreases(0.8, [3], 3)
  assertTrustIncreases(0.8, [3], 4)

  display("basic tests are passing :)")

  /** more sophisticated requirements */

  /** investor point of view first */

  /** bigger investments lead to bigger trust */
  assertTrustNoGreater(0.2, [], 2, 3)
  assertTrustNoGreater(0.5, [], 2, 4)
  assertTrustNoGreater(0.8, [], 1, 4)

  /** trust increases/decreases are lower later on */
  let inc1 = assertTrustIncreases(0.5, [], 3)
  let inc2 = assertTrustIncreases(0.5, [1,2], 3)
  let inc3 = assertTrustIncreases(0.5, [1,2,3,3], 3)
  assert(inc1 > inc2 && inc2 > inc3, "FAIL: trust should increase slower " +
    "as the game progresses, instead found: inc1=" + inc1 + ", inc2=" + inc2 + ", inc3=" + inc3)

  let dec1 = assertTrustDecreases(0.5, [], 1)
  let dec2 = assertTrustDecreases(0.5, [2,2], 1)
  let dec3 = assertTrustDecreases(0.5, [2,2,1,1], 1)
  assert(dec1 > dec2 && dec2 > dec3, "FAIL: trust should decrease slower " +
    "as the game progresses, instead found: dec1=" + dec1 + ", dec2=" + dec2 + ", dec3=" + dec3)

  assertTrustBetween(1, 0.9, 1, [4,0,4,0], 2)

  /** below considers from investee's point of view */
  assertTrustDecreases(0.5, [2], 2)
  assertTrustIncreases(0.5, [2], 3)
  /** big return is a bit suspicious */
  assertTrustBetween(0.5, 0.4, 0.6, [2], 4)

  assertTrustBetween(0.57, 0.5, 0.6, [4,0,4,0,4], 8)
  assertTrustBetween(0.57, 0.5, 0.6, [4,0,4,0,4], 7)
  // assertTrustIncreases(0.57, [4,0,4,0,4], 7)
  assertTrustIncreases(0.57, [4,0,4,0,4], 6)
  assertTrustIncreases(0.57, [4,0,4,0,4], 5)
  assertTrustDecreases(0.57, [4,0,4,0,4], 4)
  assertTrustDecreases(0.57, [4,0,4,0,4], 3)
  assertTrustDecreases(0.57, [4,0,4,0,4], 2)
  assertTrustDecreases(0.57, [4,0,4,0,4], 1)
  assertTrustDecreases(0.57, [4,0,4,0,4], 0)

  assertTrustBetween(0.5, 0.2, 0.35, [4], 0)
}

let testTrustDynamicsConman = function() {
  /** test trust dynamics model in conman case! */
  let gameSpecificParams = {
    endowments: {
      'investor': 4,
      'investee': 0
    },
    horizon: {
      investee: 3
    },
    k: 2
  }

  let game = makeTrustCSMG(gameSpecificParams)

  let updateTrustEstimation = game.mentalStateDynamics.estimationHeuristicArr[0]
  let transitionFn = game.transitionFn


  let getState = function(actions) {
    return reduceL(function(state, action) {
      return sample(transitionFn(state, action))
    }, game.initialState, actions)
  }

}

testTrustDynamics()