/** To run
 $ webppl examples/trustgame/test.wppl --require . --require examples/trustgame
 from the top level directory
 */

/** test trust dynamics model */
let testTrustDynamics = function() {
  let gameSpecificParams = {
    endowments: {
      'investor': 4,
      'investee': 0
    },
    k: 2
  }

  let game = makeTrustCSMG(gameSpecificParams)

  let getState = function(actions) {
    return reduceL(function(state, action) {
      return sample(transitionFn(state, action))
    }, game.initialState, actions)
  }

  let updateTrustEstimation = game.mentalStateDynamics.estimationHeuristicArr[0]
  let transitionFn = game.transitionFn

  /** First suppose trust is low */

  let failMsgTrustDynamics = "FAIL: trust dynamics: "
  let sucMsgTurstDynamics = "PASS: trust dynamics: "
  /** it should remain low after a low investment */
  let trustlow1 = updateTrustEstimation(0.2, 0, 1, getState([1]))
  assertBetween(trustlow1, 0.2, 0.5,
    failMsgTrustDynamics + "initial: 0.2, action: 1, found: " + trustlow1 +
    ", expected between 0.2 and 0.4 (should go up)",
    sucMsgTurstDynamics + "initial: 0.2, action: 1 (out of 4), updated: " + trustlow1)
  let trustlow4 = updateTrustEstimation(0.2, 0, 1, getState([4]))
  assert(trustlow4 < trustlow1, failMsgTrustDynamics +
    "given initial trust 0.2, investing 1 should give higher trust than " +
    "investing 4, as the latter considered suspicious",
    sucMsgTurstDynamics + "initial: 0.2; after high transfer (4): " +
    trustlow4 + "; after low transfer: (1): " + trustlow1 + ". As expected " +
    "higher transfer is considered suspicious and results in lower trust")

  let trustHigh1 = updateTrustEstimation(0.8, 0, 1, getState([1]))
  let trustHigh4 = updateTrustEstimation(0.8, 0, 1, getState([4]))
  assert(trustHigh4 > trustHigh1, failMsgTrustDynamics + "given " +
    "high trust (0.8), low investment (1) should result in lower trust than" +
    " high investment (4)",
    sucMsgTurstDynamics + "initial: 0.8; low investment (1) resulted " +
    "in lower trust (" + trustHigh1 + ") than high investment (4) - " + trustHigh4)

  display(updateTrustEstimation(0.45, 0,1,getState([0])))
  display(updateTrustEstimation(0.36, 0,1,getState([0,0,0])))


  display(updateTrustEstimation(0.36, 0,1,getState([1])))
  display(updateTrustEstimation(0.36, 0,1,getState([2])))
  display(updateTrustEstimation(0.36, 0,1,getState([3])))
}

let testTrustDynamicsConman = function() {
  /** test trust dynamics model in conman case! */
  let gameSpecificParams = {
    endowments: {
      'investor': 4,
      'investee': 0
    },
    horizon: {
      investee: 3
    },
    k: 2
  }

  let game = makeTrustCSMG(gameSpecificParams)

  let updateTrustEstimation = game.mentalStateDynamics.estimationHeuristicArr[0]
  let transitionFn = game.transitionFn


  let getState = function(actions) {
    return reduceL(function(state, action) {
      return sample(transitionFn(state, action))
    }, game.initialState, actions)
  }

}

testTrustDynamics()