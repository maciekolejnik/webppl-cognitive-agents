/** dependencies:
 *  - assert.wppl
 *  - printing.wppl
 *  - ultimatum/src/ultimatum.wppl
 */

let testGetProposals = function() {
  assertEqual(getProposals(5), [0,1,2,3,4,5],
    "testGetProposals(): FAIL: getProposals(5): found: " +
    arrayToString(getProposals(5)) + ", expected: [0,1,2,3,4,5]",
    "PASS: testGetProposals: getProposals(5)")
  assertEqual(getProposals(10), [0,1,2,3,4,5,6,7,8,9,10],
    "testGetProposals(): FAIL: getProposals(10): found: " +
    arrayToString(getProposals(10)) + ", expected: " +
    "[0,1,2,3,4,5,6,7,8,9,10]",
    "PASS: testGetProposals: getProposals(10)")
  assertEqual(getProposals(14), [0,1,3,4,6,7,8,10,11,13,14],
    "testGetProposals(): FAIL: getProposals(14): found: " +
    arrayToString(getProposals(14)) + ", expected: " +
    "[0,1,3,4,6,7,8,10,11,13,14]",
    "PASS: testGetProposals: getProposals(14)")
  assertEqual(getProposals(20), [0,2,4,6,8,10,12,14,16,18,20],
    "testGetProposals(): FAIL: getProposals(20): found: " +
    arrayToString(getProposals(20)) + ", expected: " +
    "[0,2,4,6,8,10,12,14,16,18,20]",
    "PASS: testGetProposals: getProposals(20)")
}()



let testTransitions = function() {
  let gameSpecificParams = {
    endowment: 10
  }
  let proposerActions = [0,1,2,3,4,5,6,7,8,9,10]
  let proposeeActions = ['accept', 'reject']
  let game = makeUltimatumCSMG(gameSpecificParams)
  let actions = assertDefinedNotNull(game.actions,
  "testTransitions(): game.actions undefined")
  let transitionFn = assertDefinedNotNull(game.transitionFn,
    "testTransitions(): game.transitionFn undefined")
  let initialState = assertDefinedNotNull(game.initialState,
  "testTransitions(): initialState undefined")
  assertEqual(turn(initialState), 0,
    "FAIL: testTransitions(): turn at initial state not as " +
    "expected: " + turn(initialState),
    "PASS: testTransitions(): turn ok at initial state")
  assertEqual(actions(initialState), proposerActions,
    "testTransitions(): FAIL: actions0 not as expected",
    "PASS: testTransitions(): actions0")
  let state1 = sample(transitionFn(initialState, 5))
  assertEqual(state1,{
    proposals: [5],
    responses: []
  }, "FAIL: testTransitions(): state1 not as expected",
    "PASS: testTransitions(): state1")
  assertEqual(turn(state1), 1,
    "FAIL: testTransitions(): turn at state1 not as " +
    "expected: " + turn(state1),
    "PASS: testTransitions(): turn ok at state1")
  assertEqual(actions(state1), proposeeActions,
    "testTransitions(): actions1 not as expected",
    "PASS: testTransitions(): actions1")
  let state2 = sample(transitionFn(state1, 'accept'))
  assertEqual(state2, {
    proposals: [5],
    responses: ['accept']
  }, "testTransitions(): state2 not as expected",
    "PASS: testTransitions(): state2")
  assertEqual(turn(state2), 0,
    "FAIL: testTransitions(): turn at state2 not as " +
    "expected: " + turn(state2),
    "PASS: testTransitions(): turn ok at state2")
  assertEqual(actions(state2), proposerActions,
    "testTransitions(): actions2 not as expected",
    "PASS: testTransitions(): actions2")
  let state3 = sample(transitionFn(state2, 7))
  assertEqual(state3, {
    proposals: [7,5],
    responses: ['accept']
  }, "testTransitions(): state3 not as expected",
    "PASS: testTransitions(): state3")
  assertEqual(actions(state3), proposeeActions,
    "testTransitions(): actions3 not as expected",
    "PASS: testTransitions(): actions3")
  let state4 = sample(transitionFn(state3, 'reject'))
  assertEqual(state4, {
    proposals: [7,5],
    responses: ['reject', 'accept']
  }, "testTransitions(): state4 not as expected",
    "PASS: testTransitions(): state4")
}()

let testTurn = function() {

}()
