/** To run
 $
 */

/** Setup game structure */
let defaultOptions = {
  horizon: 10,
  beliefRepresentation: 'dirichlet'
}

let defaultGameSpecificParams = {
  tippingNorm: 20,
  gaspScores: [0,5]
}

let names = ['ben', 'abi']

/** Callbacks */
let printGuilt = function(game, agents, state, names) {
  let turn = game.API.turn
  if (turn(state) === 0) {
    let tipper = agents[1]
    let mentalState = tipper.mentalState
    let guilt = mentalState(state,0)
    let stateToString = game.API.stateToString
    explain(names[1] + "'s guilt at state " + stateToString(state) + ": " + guilt)
  }
}

let callbacks = {
  periodic: printGuilt
}

let testExperiment = function() {
  /**
   basic scenario for now
   */
  let getScenario1 = function() {
    let name = "basic"
    let benParams = {
      goalCoeffs: [1],
      metaParams: {
        alpha: 0,
        discountFactor: 1,
        lookAhead: 1
      },
      usesHeuristics: false
    }
    let benInitialState = {
      belief: [undefined, [2,2]],
      mentalEstimations: [undefined, [Delta({v: 1})]], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: [undefined, Categorical({vs: [100]})],
        lookAhead: [undefined, Categorical({vs: [1]})],
        discountFactor: [undefined, Categorical({vs: [1]})]
      }
    }
    let ben = {
      params: benParams,
      initialState: benInitialState
    }

    let abiParams = {
      goalCoeffs: [0.4, 0.6],
      metaParams: {
        alpha: 50,
        discountFactor: 1,
        lookAhead: 1
      },
      usesHeuristics: false
    }
    let abiInitialState = {
      belief: [[1], undefined],
      mentalEstimations: [[Delta({v: "irrelevant"})], undefined], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: [Categorical({vs: [100]}), undefined],
        lookAhead: [Categorical({vs: [2]}), undefined],
        discountFactor: [Categorical({vs: [0.8]}), undefined]
      }
    }
    let abi = {
      params: abiParams,
      initialState: abiInitialState
    }
    let agents = [ben, abi]
    let gameSpecificParams = {
      tippingNorm: 10,
      gaspScores: [0,2]
    }
    return {
      name,
      agents,
      options: defaultOptions,
      gameSpecificParams
    }
  }

  let getScenarios = function() {
    return [getScenario1()]
  }

  return {
    name: "testExperiment",
    desc: "Just a collection of random scenarios",
    getScenarios,
    names,
    callbacks
  }
}()

let randomSimulationsExperiment = function() {

  /** ben doesn't really matter, is always the same */
  let benParams = {
    goalCoeffs: [1],
    metaParams: {
      alpha: 0,
      discountFactor: 1,
      lookAhead: 1
    },
    usesHeuristics: false
  }
  let benInitialState = {
    belief: [undefined, [2,2]],
    mentalEstimations: [undefined, [Delta({v: 1})]], // an array of mental estimations (where each estimation is a distribution)
    metaParamsEstimations: {
      alpha: [undefined, Categorical({vs: [100]})],
      lookAhead: [undefined, Categorical({vs: [1]})],
      discountFactor: [undefined, Categorical({vs: [1]})]
    }
  }
  let ben = {
    params: benParams,
    initialState: benInitialState
  }

  let getAbi = function(goalCoeffs) {
    let abiParams = {
      goalCoeffs,
      metaParams: {
        alpha: 10,
        discountFactor: 1,
        lookAhead: 1
      },
      usesHeuristics: false
    }
    let abiInitialState = {
      belief: [[1], undefined],
      mentalEstimations: [[Delta({v: "irrelevant"})], undefined], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: [Categorical({vs: [0]}), undefined],
        lookAhead: [Categorical({vs: [1]}), undefined],
        discountFactor: [Categorical({vs: [1]}), undefined]
      }
    }
    let abi = {
      params: abiParams,
      initialState: abiInitialState
    }
    return abi
  }

  let getScenarios = function(params) {
    let reps = params.reps || 10
    return repeat(reps, function () {
      let moneyCoeff = uniform(0, 1)
      let goalCoeffs = [moneyCoeff, 1 - moneyCoeff]
      let gaspScore = categorical({vs: [1, 3, 5, 7]})
      let tippingNorm = categorical({vs: [5, 10, 15, 20, 25]})

      let agents = [ben, getAbi(goalCoeffs)]

      let name = "Goal coeffs: " + toString(goalCoeffs) + "; gaspScore: "
        + gaspScore + "; tippingNorm: " + tippingNorm

      let gameSpecificParams = {
        tippingNorm,
        gaspScores: [0, gaspScore]
      }

      let options = {
        horizon: params.rounds * 2,
        beliefRepresentation: 'dirichlet'
      }

      return {
        name,
        agents,
        options,
        gameSpecificParams
      }
    })
  }

  let getParams = function() {
    let roundsStr = assertDefined(argv.rounds,
      "rounds must be specified; pass it as --rounds <5/10/15>")
    let rounds = parseInt(roundsStr)
    assert(rounds > 0, "rounds must be > 0; found: " + rounds)
    let repsStr = argv.reps
    let reps = function() {
      if (isDefined(repsStr)) {
        let reps = parseInt(repsStr)
        assert(reps > 0, "reps must be > 0; found: " + reps)
        return reps
      }
      return undefined
    }()
    return {
      rounds,
      reps
    }
  }

  let wrapUp = function(trajectoriess, scenarios) {
    let scenariosAsDataFileStrings = mapIndexed(function(index, scenarioTrajectories) {
      let scenarioTrajectory = scenarioTrajectories[0]
      let tippingNorm = scenarios[index].gameSpecificParams.tippingNorm
      let gaspScore = scenarios[index].gameSpecificParams.gaspScores[1]
      let abiGoalCoeffs = scenarios[index].agents[1].params.goalCoeffs
      let actions = map(snd, scenarioTrajectory).slice(0,-1)
      assert(actions.length % 2 === 0,
        "printDataFilesFromTrajectories: expected even number " +
        "of actions; found: " + actions)
      let rounds = mapN(function(i) {
        return [actions[2*i], actions[2*i+1]]
      }, actions.length / 2)
      let roundsAsString = reduceL(function(acc, round) {
        return acc + round[0] + ";" + round[1] + "\n"
      }, "", rounds)
      let result =
        "% abi goal coeffs: " + toString(abiGoalCoeffs) + "\n" +
        "(0,ben);(1,abi)\n\n" +
        tippingNorm + ";0;" + gaspScore + "\n\n" +
        "<start>\n" +
        "% agents\n" +
        "0;1\n" +
        "%rounds\n" +
        roundsAsString +
        "<end>"
      return result
    }, trajectoriess)

    // map(display, scenariosAsDataFileStrings)

    let rounds = scenarios[0].options.horizon / 2

    let dir = "examples/tipping/data/generated/" + rounds
    fs.mkdirp(dir)

    mapIndexed(function(index, scenarioAsDataFileString) {
      let filename = dir + "/simulation" + index + ".csv"
      fs.write(filename, scenarioAsDataFileString)
    }, scenariosAsDataFileStrings)
  }

  return {
    name: "randomSimulationsExperiment",
    desc: "We randomly choose goal coeffs, gasp score and tipping norm " +
      "and simulate N rounds of tipping game where N is " +
      "provided by [--horizon N] (mandatory). We do it K times, where " +
      "[--reps K] (optional, K defaults to 10). Running this experiment " +
      "will create a subdirectory in 'data/generatedData' and all the " +
      "generated data files will go there.",
    getScenarios,
    names,
    getParams,
    wrapUp,
    callbacks
  }
}()

let experiments = [testExperiment, randomSimulationsExperiment]
let outcome = processCommandline(makeTippingCSMG, experiments, argv)


// let printDataFilesFromTrajectories = function(trajectories, scenarios) {
//   let scenariosAsDataFileStrings = mapIndexed(function(index, scenarioTrajectories) {
//     let scenarioTrajectory = scenarioTrajectories[0]
//     let tippingNorm = scenarios[index].gameSpecificParams.tippingNorm
//     let gaspScore = scenarios[index].gameSpecificParams.gaspScores[1]
//     let abiGoalCoeffs = scenarios[index].agents[1].params.goalCoeffs
//     let actions = map(snd, scenarioTrajectory).slice(0,-1)
//     assert(actions.length % 2 === 0,
//       "printDataFilesFromTrajectories: expected even number " +
//       "of actions; found: " + actions)
//     let rounds = mapN(function(i) {
//       return [actions[2*i], actions[2*i+1]]
//     }, actions.length / 2)
//     let roundsAsString = reduceL(function(acc, round) {
//       return acc + round[0] + ";" + round[1] + "\n"
//     }, "", rounds)
//     let result =
//       "% abi goal coeffs: " + toString(abiGoalCoeffs) + "\n" +
//       "(0,ben);(1,abi)\n\n" +
//       tippingNorm + ";0;" + gaspScore + "\n\n" +
//       "<start>\n" +
//       "% agents\n" +
//       "0;1\n" +
//       "%rounds\n" +
//       roundsAsString +
//       "<end>"
//     return result
//   }, trajectories)
//
//   map(display, scenariosAsDataFileStrings)
//
//   mapIndexed(function(index, scenarioAsDataFileString) {
//     let filename = "examples/tipping/data/generatedData15r/simulation" + index + ".txt"
//     fs.write(filename, scenarioAsDataFileString)
//   }, scenariosAsDataFileStrings)
// }
// printDataFilesFromTrajectories(trajectories, randomSimulationsExperiment.scenarios)



