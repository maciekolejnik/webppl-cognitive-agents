/** To run this file:
 $ webppl examples/tipping/src/predicting.wppl --require .
 --require examples/tipping/ --require webppl-fs -- --data <dataFileName>
 */

let INFERENCE_MODE = true
// let LOGGING_LEVEL = getLoggingLevel()
// display("level: " + LOGGING_LEVEL)

let PATH = "examples/tipping/data/"

/** PHASE 1 */
let dataFilename = getDataFilename(PATH)
let dataLines = getRelevantLines(dataFilename)
// let lines = getRelevantLines('examples/tipping/data/test.csv')
// display(dataLines)
let players = readPlayersLine(dataLines[0])
// display(players)
let params = readParamsArray(dataLines[1])
// display(params)
let gameSpecificParams = {
  tippingNorm: params[0],
  gaspScores: [params[1], params[2]]
}
let data = readPlays(dataLines.slice(2), [identity, parseInt])

let tipeeMetaParamsP = {
  alpha: [0],
  discountFactor: [1],
  lookAhead: [1]
}

let tipperMetaParamsP = {
  // alpha: [5,10],
  alpha: [10],
  discountFactor: [0.9],
  lookAhead: [1]
}

let goalCoeffsCustomSupport = argv.goalCoeffsSupport
let goalCoeffsSupport = isDefined(goalCoeffsCustomSupport) ?
  _top.eval(goalCoeffsCustomSupport) :
  [[1,0],[.8,.2],[.6,.4],[.4,.6],[.2,.8],[0,1]] /** this is default */
assertIsArray(goalCoeffsSupport, ARRAY_TYPE, -1,
  "goalCoeffsSupport passed in the command must be an array of " +
  "possible goal coefficient vectors; found: " + goalCoeffsCustomSupport)
// let goalCoeffsSupport = [[1,0],[.8,.2],[.6,.4],[.4,.6],[.2,.8],[0,1]]
// let goalCoeffsSupport = [[.71,.29]]
// let goalCoeffsSupport = [[.7,.3]]

let playersDataStructure =
  [
     /** agent 0 - tipee */
     constructBeliefOverPlayer(0, [[1]], tipeeMetaParamsP,[[1]], [[2,2]] )
    ,
    /** agent 1 - tipper */
    constructBeliefOverPlayer(1, goalCoeffsSupport, tipperMetaParamsP,[[1]], [[2,2]] )
    // constructBeliefOverPlayer(1, [[.71,.29]], tipperMetaParamsP,[[1]], [[2,2]] )
  ]

let tippingNormCustomSupport = argv.tippingNormSupport
let tippingNormSupport = isDefined(tippingNormCustomSupport) ?
  _top.eval(tippingNormCustomSupport) :
  [5,10,15,20,25] /** this is default */
assertIsArray(tippingNormSupport, INT_TYPE, -1,
  "tippingNormSupport passed in the command must be an array of " +
  "integers; found: " + tippingNormCustomSupport)
// let tippingNormSupport = [5,10,15,20,25]
// let tippingNormSupport = [5,7,9,11,15]
let tippingNormBelief = Categorical({vs: tippingNormSupport})


let gaspScoreCustomSupport = argv.gaspScoreSupport
let gaspScoreSupport = isDefined(gaspScoreCustomSupport) ?
  _top.eval(gaspScoreCustomSupport) :
  [1,3,5,7] /** this is default */
assertIsArray(gaspScoreSupport, INT_TYPE, -1,
  "gaspScoreSupport passed in the command must be an array of " +
  "integers; found: " + gaspScoreCustomSupport)
// let gaspScoreSupport = [1,3,5,7]
// let gaspScoreSupport = [2]
let gaspScoreBelief = Categorical({vs: gaspScoreSupport})

/** END OF PHASE 1
 * We now have
 * - players data structure
 * - game-specific params
 * - and data (an array of plays)
 */

/** PHASE 2 */

/** First, create appropriate game structure */
let externalParams = {
  beliefRepresentation: 'dirichlet'
}
let csmg = makeCSMG(makeTippingCSMG(gameSpecificParams), externalParams)

/** for now this is copied from infer.wppl and slightly modified to
 * support parameter learning. in the future parameter learning should
 * be
 */
let processData = function(data, csmg, prior) {
  explain("Prior used:")
  explain("goal coeffs: uniform over " + toString(goalCoeffsSupport))
  explain("gasp score: uniform over " + toString(gaspScoreSupport))
  explain("tipping norm: uniform over " + toString(tippingNormSupport))
  info("processData()")
  assertDefinedNotNull(data, "processData(): data undefined")
  assertDefinedNotNull(csmg, "processData(): csmg undefined")
  assertDefinedNotNull(prior, "processData(): prior undefined")
  assertDefinedNotNull(prior.players, "processData(): prior.players undefined")
  assertDefinedNotNull(prior.tippingNorm, "processData(): prior.tippingNorm undefined")
  let turn = csmg.API.turn
  let actionSimilarity = csmg.API.actionSimilarity
  let stateToString = csmg.API.stateToString
  let transitionFn = csmg.transitionFn
  /** Params
   *
   * @param playersDataStructure
   * @param play | consists of agents participating + actions taken:
   *  {
   *    agents: <array of agentIDs>,
   *    rounds: <array (sequence) of rounds>
   *      each round = seq of actions + (optionally) states
   *  }
   * @returns updated players data structure
   */
  let processOnePlay = function(prior, play) {
    info("processOnePlay(): play=" + toString(play))
    assertDefinedNotNull(prior, "processOnePlay(): prior undefined")
    assertDefinedNotNull(prior.players,
      "processOnePlay(): prior.players undefined")
    assertDefinedNotNull(prior.tippingNorm,
      "processOnePlay(): prior.tippingNorm undefined")
    assertDefinedNotNull(play, "processOnePlay(): play undefined")
    let agentIDs = play.agents
    debug("Processing a play involving agents: "
      + arrayToString(agentIDs))
    debug("Prior beliefs:")
    let abiGoalCoeffsBelief = marginalize(prior.players[1], "goalCoeffs")
    let abiRationalityBelief = marginalize(
      marginalize(prior.players[1], "metaParams"), "alpha")
    if (abiGoalCoeffsBelief.supp.length > 1) {
      debug("abi's goal coeffs:")
      debug(discreteDistributionToString(abiGoalCoeffsBelief, abiGoalCoeffsBelief.supp))
    }
    if (abiRationalityBelief.supp.length > 1) {
      debug("abi's rationality:")
      debug(discreteDistributionToString(abiRationalityBelief, abiRationalityBelief.supp))
    }
    if (tippingNormSupport.length > 1) {
      debug("prior over tipping norm:")
      debug(discreteDistributionToString(prior.tippingNorm, tippingNormSupport))
    }
    if (gaspScoreSupport.length > 1) {
      debug("prior over gasp score:")
      debug(discreteDistributionToString(prior.gaspScore, gaspScoreSupport))
    }
    assertEqual(csmg.params.numberOfAgents, agentIDs.length,
      "processOnePlay(): size of agentIDs array doesn't match " +
      "number of agents in the game!")

    /** roundData = { states: <>, actions: <>} */
    let processRound = function(prior, roundData) {
      info("processRound(): roundData=" + toString(roundData))
      assertDefinedNotNull(prior, "processRound(): prior undefined")
      assertDefinedNotNull(roundData, "processRound(): actions undefined")

      let states = assertDefinedNotNull(roundData.states,
        "processRound(): states undefined")
      let actions = assertDefinedNotNull(roundData.actions,
        "processRound(): actions undefined")
      assert(states.length === actions.length + 1,
        "processRound(): there should be one more state than" +
        " actions; found: " + states.length + " states, " +
        actions.length + " actions")
      let stateActionPairs = map2(function(state, action) {
        return {state, action}
      }, states.slice(0,-1), actions)

      debug("Process round of actions " +
        arrayToString(actions) + " at states " +
        arrayToString(states.slice(0,-1)))

      let processAction = function(prior, stateAction) {
        assertDefinedNotNull(prior, "processAction(): prior undefined")
        assertDefinedNotNull(stateAction, "processAction(): stateAction undefined")
        info("processAction(): stateAction=" + toString(stateAction))
        let state = assertDefinedNotNull(stateAction.state,
          "processAction(): state undefined")
        let observedAction = assertDefinedNotNull(stateAction.action,
          "processAction(): action undefined")
        let turn = turn(state)
        let actingAgentID = agentIDs[turn]
        // let observedAction = (actingAgentID === 0) ?
        //   observedActionRaw : parseInt(observedActionRaw)

        let playersBelief = prior.players
        let tippingNormBelief = prior.tippingNorm
        let gaspScoreBelief = prior.gaspScore

        debug("Learn from action " + observedAction + " by " +
          "agent " + turn)

        /** IMPORTANT: here is where the inference happens */
        let agentAndTippingNormPosterior = Infer({method: 'enumerate'}, function() {
          let tippingNorm = sample(tippingNormBelief)
          let gaspScore = sample(gaspScoreBelief)
          let gameSpecificParams = {
            tippingNorm,
            gaspScores: [0, gaspScore]
          }
          let agentSetup = sample(playersBelief[actingAgentID])
          let agentParams = {
            goalCoeffs: agentSetup.goalCoeffs,
            metaParams: agentSetup.metaParams
          }
          let agentInitialState = {
            belief: agentSetup.belief,
            mentalEstimations: agentSetup.mentalEstimations,
            metaParamsEstimations: agentSetup.metaParamsEstimations
          }
          info("make agent id=" + actingAgentID + ", with params:")
          info(agentParams)
          info("and initial state:")
          info(agentInitialState)
          let csmgP = makeCSMG(makeTippingCSMG(gameSpecificParams), externalParams)
          let agent = makeAgent(agentParams, actingAgentID, agentInitialState, csmgP)
          let act = agent.act
          let computedAction = sample(act(state))
          factor(actionSimilarity(state, computedAction, observedAction))
          return { agentSetup, tippingNorm, gaspScore }
        })

        let agentPosterior = marginalize(agentAndTippingNormPosterior, function(x) {
          return x.agentSetup
        })
        let tippingNorm = marginalize(agentAndTippingNormPosterior, function(x) {
          return x.tippingNorm
        })
        let gaspScore = marginalize(agentAndTippingNormPosterior, function(x) {
          return x.gaspScore
        })

        debug("Processed action " + observedAction +
          " at state " + stateToString(state))

        return {
          players: arrayReplace(prior.players, actingAgentID, agentPosterior),
          tippingNorm,
          gaspScore
        }
        // return arrayReplace(prior, actingAgentID, agentPosterior)
      }

      let posterior = reduceL(processAction, prior, stateActionPairs)
      // explain("Processed round of " + toString(actions))
      // explain("Updated belief over agents:")
      // map(function(agentID) {
      //   explain("Over agent " + agentID + ":\n" +
      //     bigBeliefToString(posterior[agentID]))
      // }, agentIDs)
      return posterior
    }

    if (play.length == 0) {
      return playersDataStructure
    }

    /** in case states were not provided, fill them in */
    let rounds = function() {
      let optionallyExtend = function(acc, round) {
        let currentState = acc[0]
        let extendedRounds = acc[1]
        if (round.states !== undefined) {
          return [round.states[round.states.length - 1],
            extendedRounds.concat([round])]
        }
        let f = function(statesArr, action) {
          let prevState = statesArr[statesArr.length - 1]
          let nextState = sample(transitionFn(prevState, action))
          return statesArr.concat([nextState])
        }
        let states = reduceL(f, [currentState], round)
        let finalState = states[states.length - 1]
        let extendedRound = {
          actions: round,
          states
        }
        return [finalState, extendedRounds.concat([extendedRound])]
      }
      let result = reduceL(optionallyExtend,
        [csmg.initialState,[]], play.rounds)
      return result[1]
    }()
    /** rounds in an array of round;
     *  each round is an object {
     *    states: <array of states>,
     *    actions: <array of actions>
     *  }
     *  except that states may be skipped if obvious */

    // let prior = {
    //   players: playersDataStructure,
    //   tippingNorm: tippingNormBelief
    // }
    let posterior = reduceL(processRound, prior, rounds)
    critical("Processed the play.")
    critical("Posterior over agents:")

    let abiGoalCoeffsBeliefPost = marginalize(posterior.players[1], "goalCoeffs")
    let abiRationalityBeliefPost = marginalize(
      marginalize(posterior.players[1], "metaParams"), "alpha")
    if (abiGoalCoeffsBeliefPost.supp.length > 1) {
      critical("abi's goal coeffs:")
      critical(discreteDistributionToString(abiGoalCoeffsBeliefPost, abiGoalCoeffsBeliefPost.supp))
    }
    if (abiRationalityBeliefPost.supp.length > 1) {
      critical("abi's rationality:")
      critical(discreteDistributionToString(abiRationalityBeliefPost, abiRationalityBeliefPost.supp))
    }
    if (tippingNormSupport.length > 1) {
      critical("tipping norm:")
      critical(discreteDistributionToString(posterior.tippingNorm, tippingNormSupport))
    }
    if (gaspScoreSupport.length > 1) {
      critical("gasp score:")
      critical(discreteDistributionToString(posterior.gaspScore, gaspScoreSupport))
    }
    return posterior
  }

  return reduceL(processOnePlay, prior, data)
}

/** Then condition on the observed data to compute posterior */
let posterior = processData(data, csmg, {
    players: playersDataStructure,
    tippingNorm: tippingNormBelief,
    gaspScore: gaspScoreBelief
  }
)

/** PHASE 3 */

/** Read the data from the prediction file */
if (isDefined(argv.predict)) {
  let filename = getPredictFilename(PATH)
  let predictLines = getRelevantLines(filename)
  let playsToPredict = readPlays(predictLines)
}