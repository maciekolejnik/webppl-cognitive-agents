/** To run:
 $ webppl examples/<nameOfExample>/src/simulations.wppl --require .
 --require examples/<nameOfExample> [--] [--experiments <experimentID>]
 [--scenario <scenarioID>] [--runs <numberOfRuns>]
 */

/** Default options */
let defaultOptions = {
  horizon: 0, /** set appropriately */
  beliefRepresentation: 'dirichlet' /** or 'discrete' */
}

let defaultGameSpecificParams = {
  /** if any */
}

let callbacks = function() {
  let setupCallback = function(game, agents, state, names) {
    // let ms = agents[0].mentalState
    // let mr = agents[1].mentalRewards
    // let belief = agents[0].belief
    // etc etc
    // print this or that
  }

  let periodicCallback = function(game, agents, state, names) {
    error("not implemented")
  }

  let finalCallback = function(game, agents, state, names) {
    error("not implemented")
  }

  return {
    setup: setupCallback,
    periodic: periodicCallback,
    final: finalCallback
  }
}()

/** Usually names will be the same in all experiments */
let names = ['p1', 'p2']

/** Usually first experiment is just a random collection of scenarios
 * that are used to test that the game is imeplemented correctly
 */
let testExperiment = function() {

  let scenario1 = {}
  let scenario2 = {}
  let getScenarios = function() {
    return [scenario1, scenario2]
  }
  return {
    name: "testExperiment",
    desc: "A random collection of scenarios",
    getScenarios,
    names,
    callbacks
  }
}()

/** Each of the other experiments should investigate something in
 * particular */

/** Some experiments need to do something unusual that does not just
 * involve passing list of scenarios to simulateScenarios().
 * Those experiments should specify a run() function that runs the
 * experiment. It can take parameters, passed in an object retrieved
 * by getParams() function (which retrieves params from argv)*/
let experiment2 = function() {
  let run = function(params) {

  }

  let getParams = function() {
    let param1 = argv.param1 /** etc */
    return {
      param1
    }
  }

  let scenarios = [
    { name: "first" },
    { name: "second" }
  ]

  return {
    name: "experiment1",
    desc: "blablabla",
    run,
    getParams,
    scenarios
  }
}

let getScenarios = function() {
  /**
   example scenario
   */
  let getExampleScenario = function() {
    let name = "example scenario"
    let firstAgentParams = generateParams([0.4,0.6], 100, 0.9, 3)
    let firstAgentInitialState = {
      belief: [undefined, [2,2]],
      mentalEstimations: [undefined, [Delta({v: 0.7})]],
      metaParamsEstimations: {
        alpha: [undefined, Categorical({vs: [100]})],
        lookAhead: [undefined, Categorical({vs: [2]})],
        discountFactor: [undefined, Categorical({vs: [0.8]})]
      }
    }
    let firstAgent = {
      params: firstAgentParams,
      initialState: firstAgentInitialState
    }
    let secondAgentParams = generateParams([0.4,0.6], 100, 0.9, 3)
    let secondAgentInitialState = {
      belief: [[1], undefined],
      mentalEstimations: [[Delta({v: "irrelevant"})], undefined], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: [Categorical({vs: [100]}), undefined],
        lookAhead: [Categorical({vs: [2]}), undefined],
        discountFactor: [Categorical({vs: [0.8]}), undefined]
      }
    }
    let secondAgent = {
      params: secondAgentParams,
      initialState: secondAgentInitialState
    }
    let agents = [firstAgent, secondAgent]
    return {name, agents, options: defaultOptions, gameSpecificParams}
  }

  return [getExampleScenario()]
}

/**
 * callback functions can be defined here
 */

/** callbacks contains functions that will be called before/during/after
 * simulating execution of the system. Each function should accept four
 * arguments: game, agents, state, names
 */
let callbacks = {
  /**
   * setup: ...,
   * periodic: ...,
   * final: ...
   */
}

/** Run simulations
 *
let scenarios = getScenarios()
simulateScenarios(scenarios, <makeGameFunction>, <names of agents>, callbacks)
 */