/** dependencies:
 * - auxiliary
 * - lambdas
 */
/** TODO: It'd be better to have less dependencies, eg
 * functions here should not call reduceL as one might want
 * to call printing functions from reduceL which would cause an
 * infinite loop */
/** PRINTING */

/** webppl prints arrays without [ and ] for some reason. fix that here
 */
let arrayToString = function(array) {
    if (isUndefined(array)) return "undefined"
    if (array.length == 0) return "[]"
    let f = function(acc, elem) {
        if (acc.length === 0) return toString(elem)
        return acc + ", " + toString(elem)
    }
    return "[" + reduceL(f, "", array) + "]"
}

let objectToString = function(obj) {
    let keys = _top.Object.keys(obj)
    let result = reduceL(function(acc, key) {
        let keyValuePair = key + ": " + toString(obj[key])
        if (acc.length == 1) return acc + keyValuePair
        return acc + ", " + keyValuePair
    }, "{", keys)
    return result + "}"
}

let toString = function(x) {
    if (x === undefined) return "undefined"
    if (x === null) return "null"
    if (_top.Array.isArray(x)) return arrayToString(x)
    if (typeof x === 'object') return objectToString(x)
    return x
}


let discreteDistributionToString = function(dist, support) {
    /** retrieve probabilities, store as pairs, with prob first so
     * that comparison is easier */
    let elemProbPairs = map(function(elem) {
        return [Math.exp(dist.score(elem)), elem]
    }, support)
    let sorted = sort(elemProbPairs, gt, fst)
    reduceL(function(acc, probElemPair) {
        let elem = probElemPair[1]
        let prob = probElemPair[0]
        // let line = toString(action) + ": " + prob
        /** temporary change to facilitate graphing */
        let line = "(" +  toString(elem) + "," + prob + ")"
        if (acc.length === 0) return acc + line
        return acc + "\n" + line
    }, "", sorted)
}


/**
 * This might be useful for debugging, returns string s in a box, i.e.
 * +---------------------+
 * |          s          |
 * +---------------------+
 * of appropriate width
 */
let stringInABox = function(s) {
    let dashes = "-".repeat(s.length + 4)
    let line = "+" + dashes + "+"
    let middle = "|  " + s + "  |"
    return line + "\n" + middle + "\n" + line
}
