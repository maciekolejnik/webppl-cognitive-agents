/**
 * @fileoverview This file collects auxiliary functions used
 * throughout the codebase that were not deemed to deserve a separate file
 *
 * @requires assert.wppl
 */

/**
 * Retrieves the ID of the "other" agent under the assumption that
 * there are two in total, equivalent to (+1) mod 2 operation
 * @param {number} agentID must be 0 or 1
 * @returns {number} ID of the other agent
 */
let otherAgentID = function(agentID) {
  assert(agentID === 0 || agentID === 1,
      "otherAgent() called with " + agentID + " but only IDs" +
      " 0 and 1 allowed!")
  return (agentID + 1) % 2
}

/** Retrieves the smaller of two numbers */
let min = function(a,b) {
  return (a>b) ? b : a
}

/** Retrieves the bigger of two numbers */
let max = function(a,b) {
  return (a>b) ? a : b
}

/**
 * Retrieves a current timestamp (seconds since UNIX epoch).
 * Used for debugging and logging
 */
let now = function() {
  return Math.floor(Date.now() / 1000)
}

/** Wrappers around _top for frequently used Javascript functions */
let parseInt = function(s) { return _top.parseInt(s)}
let parseFloat = function(s) { return _top.parseFloat(s)}

/**
 * Returns the most probable value in a support (which must be finite) of a
 * given distribution. The support must be passed separately even though it
 * typically is accessible from the distribution object (d.support())
 * @param {object} dist the distribution object
 * @param {number[]} support of the distribution
 * @returns {number} the value deemed most likely by dist
 */
let mostProbableValueInSupport = function(dist, support) {
  let mostProbableValueInSupportHelper =
      function(dist, support, maxProbSoFar, valueWithMaxProb) {
        if (support.length == 0) return valueWithMaxProb
        let thisValue = support[0]
        let thisValueProb = Math.exp(dist.score(thisValue))
        let supportTail = support.slice(1)
        if (thisValueProb > maxProbSoFar) {
          return mostProbableValueInSupportHelper(
              dist, supportTail, thisValueProb, thisValue)
        }
        return mostProbableValueInSupportHelper(
            dist, supportTail, maxProbSoFar, valueWithMaxProb)
      }
      return mostProbableValueInSupportHelper(
          dist, support, 0, null)
}

/**
 * Computes the number of components in agents' utility functions.
 * This differs between agents as each cares about some mental states
 * of some agents (others or themselves). That information is stored in
 * the array of mental utilities, which this function maps over.
 * @param {number} physicalRewardsNo
 * @param {number[][]} mentalUtilitiesArr nested array, indexed by agent
 * @returns {number[]} number of goal coeffs indexed by agent
 */
let computeGoalCoeffsNumber = function(physicalRewardsNo, mentalUtilitiesArr) {
  let result = map(function(agentMentalUtils) {
    return physicalRewardsNo + arrayConcat(agentMentalUtils).length
  }, mentalUtilitiesArr)
  return result
}

/**
 * Equality
 */
const EPSILON = Number.EPSILON * 10 // used for floating point comparisons

/** Approximate equality of two scalars */
let approxEqual = function(a,b) {
  return Math.abs(a - b) < EPSILON
}

/**
 * Approximate piecewise equality of arrays
 * Pre: arr1.length == arr2.length
 */
let approxEqualArr = function(arr1,arr2) {
  let eachEqual = map2(function(a1,a2) {
    return approxEqual(a1,a2)
  }, arr1, arr2)
  return all(identity, eachEqual)
}