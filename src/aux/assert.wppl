/** dependencies:
 * - lambdas
 */

/** ASSERTIONS
 *  This file implements a basic assertion mechanism as the
 *  default console.assert was deemed unsatisfactory.
 *  Crucially, assertions as implemented below lead
 *  to failure of the program when they're not satisfied,
 *  unlike console.assert.
 */

/** ASSERTIONS PUBLIC API
 *  Functions and constants defined below should be called
 *  by users of */

let INT_TYPE = 'int'
let NUMBER_TYPE = 'number'
let STRING_TYPE= 'string'
let OBJECT_TYPE = 'object'
let ARRAY_TYPE = 'array'
let FUNCTION_TYPE = 'function'
let DIST_TYPE = 'distribution'
let ANY_TYPE = 'any'

/**
 *  assert that *value* has type *type*, if not, print *message*
 */
let assertHasType = function(value, type, failMsg, succMsgOpt) {
    if (failMsg === undefined) error("assertHasType called without failMsg!")
    let typeCheckers = {
        'int': function(value) { return _top.Number.isInteger(value) },
        'number': function(value) { return !_top.isNaN(value) },
        'array': function(value) { return _top.Array.isArray(value)
          || value === undefined },
        'distribution': function(value) { return dists.isDist(value)},
        'any': getConstantFn(true)
    }
    let defaultTypeChecker = function (value) {
        return typeof value === type || value === undefined
    }
    let typeChecker = typeCheckers[type] || defaultTypeChecker
    printSuccessOrRaiseError(typeChecker(value), failMsg, succMsgOpt)
}

/** assert *array* is an array of elements of type *elementType*,
 * of length *length*. print message otherwise
 * passing length=-1 means no element checking or length checking
 */
let assertIsArray = function(array, elemType, length, message) {
    if (!_top.Array.isArray(array)) {
        error("Error: " + message)
    }
    mapIndexed(function(index, elem) {
        assertHasType(elem, elemType, message +
            ": wrong type at index " + index)
    }, array)
    if (length >= 0 && array.length != length) {
        error("Error: " + message + "\nwrong number of elements: found: "
            + array.length + ", expected: " + length)
    }
}

/** assert a value is defined, failureMsg is optional */
let assertDefined = function(x, failMsg, succMsgOpt) {
    // info("assertDefined(" + x + ", failMsg: " + failMsg + ", succMsg: " + succMsg)
    if (failMsg === undefined) error("assertDefined called without error message!")
    printSuccessOrRaiseError(x !== undefined, failMsg, succMsgOpt)
    return x
}

let assertUndefined = function(x, failMsg, succMsgOpt) {
    if (failMsg === undefined) error("assertUndefined called without error message!")
    printSuccessOrRaiseError(x === undefined, failMsg, succMsgOpt)
    return x
}

/** asserts x and y are equal, where equality is taken to mean
 *  structural equality */
let assertEqual = function(x, y, failMsg, succMsg) {
    let failureMsg = failMsg + ": " + x + " not equal to " + y
    printSuccessOrRaiseError(_.isEqual(x,y), failureMsg, succMsg)
}

/** asserts lowerBound <= x <= upperBound */
let assertBetween = function(x, lowerBound, upperBound, failMsg, succMsg) {
    assert(lowerBound <= x && x <= upperBound, failMsg, succMsg)
}

/** asserts x, fails and prints *failMsg* if x doesn't hold.
 * otherwise, if succMsg (optional) is provided, prints it */
let assert = function(x, failMsg, succMsg) {
    if (!x) error(failMsg)
    if (succMsg !== undefined) display(succMsg)
}


/** PRIVATE */
/** Functions below are internal to this file,
 *  not to be called from the outside
 */

let printSuccessOrRaiseError = function(cond, failMsg, succMsg) {
    if (!cond) error("\n" + stringInABox(failMsg))
    if (succMsg !== undefined) display(succMsg)
}
