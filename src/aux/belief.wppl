/** This file contains all the 'auxiliary' belief operations.
 * The main belief functions, like getting a belief at a state
 * or updating belief must be defined separately as they are
 * game-dependent.
 *
 * The main reason for grouping belief operations together in
 * a separate file is to abstract away from belief representation.
 * To achieve that, an 'API' is given below (made up of the public
 * functions below), which defines what types of operations each
 * representation should support and those operations can then be
 * invoked by clients without knowing the representation used.
 * When adding a new representation, each function must be extended
 * to support the added representation.
 *
 * Each belief object has the form
 * {
 *   value: <value>,
 *   representation: 'dirichlet'/'discrete' etc
 * }
 * so the representation is conveniently passed around.
 * It is important to note however that two different types of belief
 * object are being passed around:
 * - fullBelief captures entire belief of an agent, consisting of
 * individual beliefs over every opponent => value (from above) is an
 * array of beliefs (where each belief is a distribution [in case of
 * discrete rep] or an array [in case of dirichlet] or maybe something
 * else [if another representation is added])
 * - individualBelief captures one agent's belief over another agent
 * => value (from above) is just a belief, whether a distribution or
 * an array
 */


/** PRIVATE */
let validateBelief = function(fullBelief, thisAgentID, numberOfAgents) {
  aux('validateBelief(' + fullBelief + ";" + thisAgentID + ";"
    + numberOfAgents + ")")
  map(function(agentID) {
    let indBelief = fullBelief[agentID]
    let intro = 'validateBelief() with ' + toString(fullBelief) +
      ' for agent ' + thisAgentID
    if (agentID === thisAgentID) {
      assertUndefined(indBelief,intro + ': belief over oneself should ' +
        'be undefined, but found: ' + indBelief)
    } else {
      assertDefined(indBelief, intro + ': belief over agent '
        + agentID + ' should be defined, but found undefined')
    }
  }, rangeArray(0, numberOfAgents-1))
}

let individualBeliefToString = function(individualBelief, numberOfGoalCoeffs) {
  aux("individualBeliefToString(" + individualBelief + ","
    + numberOfGoalCoeffs + ")")
  assertDefined(individualBelief,
    "individualBeliefToString(): missing individualBelief")
  assertDefined(numberOfGoalCoeffs,
    "individualBeliefToString(): missing numberOfGoalCoeffs param")
  let appropriateFn = {
    'discrete': function() {
      let exps = goalCoeffsExpectation(individualBelief, numberOfGoalCoeffs)
      return toString(exps)
    },
    'dirichlet': function() {
      /** value of belief is an array of dirichlet params */
      return toString(individualBelief.value)
    }
  }[individualBelief.representation]
  return appropriateFn()
}

/** END PRIVATE */

/** belief is a dict { repr, value }, where value is an array
 * indexed by agents' ids. we re often interested in belief over
 * a particular agent which is what this function retrieves
 */
let retrieveBeliefOver = function(agentID, fullBelief) {
  aux("retrieveBeliefOver(): agentID=" + agentID + ", belief=" + toString(fullBelief))
  assertIsArray(fullBelief.value, ANY_TYPE, -1,
    "belief.value should be an array of ")
  assert(agentID < fullBelief.value.length)
  let individualBelief = {
    representation: fullBelief.representation,
    value: fullBelief.value[agentID]
  }
  return individualBelief
}

/** this expects FULL belief where value is array of distributions */
let beliefToString = function (fullBelief, ofAgentID, numberOfGoalCoeffsArr) {
  aux("beliefToString(): fullBelief=" + toString(fullBelief) +
    ", ofAgentID=" + ofAgentID + ", numberOfGoalCoeffsArr=" + numberOfGoalCoeffsArr)
  let initialAcc = {
    'discrete': "Belief as expectations of each goalcoeff:",
    'dirichlet': "Belief as params to dirichlet dist"
  }[fullBelief.representation]
  let agentsNo = numberOfGoalCoeffsArr.length
  let agentsRange = rangeArray(0, agentsNo-1)
  let result = reduceL(function(acc, agentID) {
    if (agentID === ofAgentID) return acc
    let individualBelief = retrieveBeliefOver(agentID, fullBelief)
    let line = "\nOver agent " + agentID + ": " +
      individualBeliefToString(individualBelief,
        numberOfGoalCoeffsArr[agentID])
    return acc + line
  }, initialAcc, agentsRange)
  aux("beliefToString(): returning")
  return result
}

/** individual belief */
let sampleBelief = function(individualBelief) {
  let appropriateFn = {
    'discrete' : function(beliefVal) {
      return sample(beliefVal)
    },
    'dirichlet': function(beliefVal) {
      /** this should not be called like this but for some reason,
       * calling sample(Dirichlet....) doesn't work */
      return Dirichlet({alpha: Vector(beliefVal)}).sample()
    }
  }[individualBelief.representation]
  return appropriateFn(individualBelief.value)
}

let goalCoeffExpectation = function(individualBelief, index) {
  info("goalCoeffExpectation(): belief=" + toString(individualBelief) +
     ", index=" + index)
  let appropriateFn = {
    'discrete': function(beliefVal) {
      assertHasType(beliefVal, DIST_TYPE,
        "belief values under discrete representation must be " +
        "distributions; found: " + toString(beliefVal) + ". Check the " +
        "initial states of agents.")
      return expectation(marginalize(beliefVal, '' + index))
    },
    'dirichlet': function(beliefVal) {
      assertIsArray(beliefVal, NUMBER_TYPE, -1,
        "belief values under dirichlet representation must be" +
        " arrays; found: " + toString(beliefVal) + ". Check the " +
        "initial states of agents and check whether you might be passing " +
        "full, rather than individual, belief to goalCoeffExpectation()")
      return beliefVal[index] / sum(beliefVal)
    }
  }[individualBelief.representation]
  let result = appropriateFn(individualBelief.value)
  info("goalCoeffExpectation(): computed " + result + ", returning...")
  return result
}

/** Takes individual belief as argument i.e. value is belief
 * over some agent.
 * returns array of expectations of goal coefficients */
let goalCoeffsExpectation = function (individualBelief, numberOfGoalCoeffs) {
  info("goalCoeffsExpectation(): belief= " + toString(individualBelief) +
    ", numberOfGoalCoeffs: " + numberOfGoalCoeffs)
  let result = map(function (index) {
      return goalCoeffExpectation(individualBelief, index)
    },
    rangeArray(0, numberOfGoalCoeffs - 1))
  info("goalCoeffsExpectation(): computed " + toString(result))
  return result
}

/** To update a belief, a condition must be passed.
 * Depending on representation used, the condition takes
 * a different form.
 */
let condToString = function (condition) {
  if (condition === undefined) return "undefined"
  let appropriateFn = {
    'discrete': function(goalCoeffs) {
      return "{ coeffs: " + toString(goalCoeffs) + " }"
    },
    'dirichlet': function(index) {
      return "{ index: " + index + " }"
    }
  }[condition.representation]
  return appropriateFn(condition.value)
}

/** Computes utility given condition cond. Used for belief update
 *
 * @param rewards {Object}   consist of mental (optional) and physical fields
 *                           ({mental:<>, physical:<>})
 * @param cond {Object}      object that specifies what representation is used
 *                           and what is the value ({representationL <>, value: <>}
 * @param utilityFns {Object} consists of physical utility function and mental
 *                           utility function ({physical: <>, mental: <>})
 * @returns {Number}         Utility
 */
let conditionalUtility = function(rewards, cond, utilityFns) {
  info("conditionalUtility(rewards: " + toString(rewards)
    + ", " + condToString(cond) + ")")
  let physicalUtilityFn = utilityFns.physical
  let mentalUtilityFn = utilityFns.mental
  let physicalNo = rewards.physical.length
  let appropriateFn = {
    'discrete': function(goalCoeffs) {
      let physicalGoalCoeffs = goalCoeffs.slice(0, physicalNo)
      let mentalGoalCoeffs = goalCoeffs.slice(physicalNo)
      return physicalUtilityFn(physicalGoalCoeffs, rewards.physical) +
        mentalUtilityFn(mentalGoalCoeffs, rewards.mental)
    },
    'dirichlet': function(index) {
      if (index < physicalNo) {
        let goalCoeffs = repeat(physicalNo, getConstantFn(1))
        return physicalUtilityFn(goalCoeffs, rewards.physical, index)
      }
      let goalCoeffs = repeat(arrayConcat(rewards.mental).length, getConstantFn(1))
      return mentalUtilityFn(goalCoeffs, rewards.mental, index - physicalNo)
      // return rewards[index]
    }
  }[cond.representation]
  info("conditionalUtility(): returning")
  return appropriateFn(cond.value)
}

let physicalCondUtilityFn = function(rewards, cond, utilityFns) {
  let physicalUtilityFn = utilityFns.physical
  let appropriateFn = {
    'discrete': function(goalCoeffs) {
      let physicalGoalCoeffs = goalCoeffs.slice(0, rewards.length)
      return physicalUtilityFn(physicalGoalCoeffs, rewards)
    },
    'dirichlet': function(index) {
      if (index >= rewards.length) return 0
      let goalCoeffs = repeat(rewards.length, getConstantFn(1))
      return physicalUtilityFn(goalCoeffs, rewards, index)
    }
  }[cond.representation]
  info("physicalCondUtilityFn(): returning")
  return appropriateFn(cond.value)
}
