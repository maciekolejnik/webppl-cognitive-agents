let INFERENCE_MODE = globalStore.inferenceMode !== undefined

let spaces = function(n) {
  return ' '.repeat(n)
}

/** LOGGING
 *
 * This implements a very basic logging mechanism, with different
 * levels reflecting different priorities of log messages.
 *
 * The logger, obtained by calling *getLogger*, provides
 * functions for outputting logs at different levels, as
 * described below. Users should simply call logging methods
 * such as *info*, *debug* etc. The general idea of different
 * methods is as follows:
 * - @critical is reserved for logs of crucial importance, usually
 *  used when something goes very wrong
 * - @explain should be used to provide explanations of system execution
 *  but it should be kept rather short and infrequent
 * - @debug should be used to log information that might help with
 *  debugging
 * - @info is mostly meant for standard logging on entry/exit to/from
 *  functions
 *
 * levels 0-5
 * 0 is no logging
 * 1 only log critical (critical)
 * 2 logs important things (critical, explain)
 * 3 is log important + debugging (critical, explain, debug)
 * 4 is  (critical, explain, debug, info)
 * 5 is log everything (aux is meant to be used for logging in
 *   printing functions)
 */
let getLogger = function(level) {
  let displayIfLevelHighAndFlag = function(message, flagOpt, treshold) {
    let flag = flagOpt === undefined || flagOpt
    let indent = globalStore.indent || 0
    if (indent < 0) {
      error("displayIfLevelHighAndFlag(): indent expected >= 0, " +
      "but found: " + indent)
    }
    let loggingLevel = globalStore.loggingLevel || level
    if (loggingLevel >= treshold && flag) {
      display(spaces(indent) + message)
    }
  }

  let aux = function(message, flagOpt) {
    displayIfLevelHighAndFlag(message, flagOpt, 5)
  }

  let info = function(message, flagOpt) {
    displayIfLevelHighAndFlag(message, flagOpt, 4)
  }

  let debug = function(message, flagOpt) {
    displayIfLevelHighAndFlag(message, flagOpt, 3)
  }

  let explain = function(message, flagOpt) {
    displayIfLevelHighAndFlag(message, flagOpt, 2)
  }

  let critical = function(message, flagOpt) {
    displayIfLevelHighAndFlag(message, flagOpt, 1)
  }

  return {aux, info, debug, explain, critical}
}

let LOGGING = {
  minLevel: 1,
  maxLevel: 5,
  default: 2
}


let getLoggingLevel = function() {
  let level = globalStore.loggingLevel || LOGGING.default
  let result = Math.max(LOGGING.minLevel, Math.min(LOGGING.maxLevel, level))
  return result
}

let logger = getLogger(getLoggingLevel())

/** logging API below */
let debug = logger.debug
let aux = logger.aux
let info = logger.info
let explain = logger.explain
let critical = logger.critical
