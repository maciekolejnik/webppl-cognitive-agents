/**
 * @fileoverview This file provides a framework for running simulations.
 * The convention is that, having encoded game's specification, one defines
 * a number of _experiments_, each consisting of one or more _scenarios_.
 * An order is assumed on experiments and scenarios, and a subset is selected
 * to be simulated on the command line. Scenarios must follow a format given
 * below.
 * @see simulationTemplate.wppl
 */

/**
 * Each standard scenario should contain the following elements:
 * @param {string} name of the scenario, possibly including a short description
 * @param {object[]} agents array of agent parameters, specifying setup of each agent
 * @param {object} gameSpecificParams parameters to be passed to getGameSetup
 * @param {?*} startingState state from which to start simulation
 *          (optional, by default, initial state of the game)
 * @param {{
 *   horizon: number,
 *   beliefRepresentation: string,
 *   printActionDistributions: boolean
 * }} options specifies simulation parameters
 *
 * Otherwise, if one needs a scenario that does something unique, one must
 * define a non-standard scenario which
 */

/**
 * Each _standard_ experiment should contain the following elements:
 * @param {string} name of the experiment
 * @param {string} desc description of the experiment,
 * @param {object[]} scenarios array of scenarios (see above)
 * @param {?number} runsDefault how many times to simulate each scenario
 *                                    (by default 1)
 * @param {?string[]} names optional array of names for agents
 * @param {?function} getParams
 * @param {?{setup: function, periodic: function, final: function}} callbacks
 *          optional code to execute at the start/after each round/at the end
 *          of each scenario
 * @param {?function} wrapUp
 *    an optional function (Trajectory[] -> Scenario[] -> *) that interprets
 *    obtained trajectories
 *
 * Otherwise, a custom experiment may be defined which has a simpler structure:
 * @param {function} run function that runs the experiment
 * @param {?function} getParams optional function to be called to obtain
 *    parameters, it takes the commandline as an argument
 */

/**
 * Processes the arguments passed on the commandline and runs the selected
 * scenario(s)/experiment(s). All experiments are run unless argv specifies
 * a particular experiment to run. If that is the case
 * @param {function} makeGame provides a way to instantiate the game
 * @param {object[]} experiments an array of experiments (see above)
 * @param {object} argv command line arguments
 */
let processCommandline = function(makeGame, experiments, argv) {
  info('processCommandLine(' + makeGame + ', ' + experiments + ', ' + argv + ')')
  assertDefinedNotNull(experiments, "processCommandLine(): experiments undefined")
  assertIsArray(experiments, OBJECT_TYPE, -1,
      "processCommandLine(): experiments not an array!; found: " +
      toString(experiments))
  let log = argv.log
  if (log) {
    assertHasType(log, NUMBER_TYPE,
        'processCommandLine(): --log must be a number; found: ' + log)
    globalStore.loggingLevel = log
  }
  let help = argv.help
  if (help) {
    printInfo(experiments)
    return
  }
  let experimentIDStr = argv.experiment
  if (isDefined(experimentIDStr)) {
    /** run only selected experiment */
    let experimentID = parseInt(experimentIDStr)
    assert(experimentID >= 0 && experimentID < experiments.length,
        "experimentID must be a valid index into experiments array" +
        " of length " + experiments.length + " but passed: " + experimentID)
    let experiment = experiments[experimentID]
    let result = run(experiment, makeGame, argv)
    return extend(result, { experimentID })
  }
  return runAll(experiments, makeGame, argv)
}

/**
 * Runs an experiment
 * There are two possibilities:
 * (1) either the experiment is standard and requires no parameters or
 * (2) it's a custom experiment, possibly accepting parameters
 *
 * In case (1), the experiment is run by retrieving its scenarios,
 * agent names, callbacks etc (which must be passed within the
 * experiment) and using *simulateScenarios* directly
 *
 * In case (2), the experiment is run by calling the run() function
 * (which must be passed in the experiment object) and optionally
 * passing it parameters, retrieved from the commandline by getParams()
 * function (which must be passed in the experiment object if parameters
 * are needed for the run function)
 * @param {object} experiment see above for format
 * @param {function} makeGame 'game constructor'
 * @param {object} argv arguments passed on the command line
 * @returns {*} the result from running the experiment
 */
let run = function(experiment, makeGame, argv) {
  info('run() experiment ' + experiment.name)
  let getParams = experiment.getParams
  let params = (isDefined(getParams)) ? getParams(argv) : {}
  if (isDefined(experiment.run)) {
    info('run(): experiment.run defined, running...')
    /** case (2) */
    let run = experiment.run
    let result = run(params)
    return {
      result
    }
  }
  /** case (1) */
  info('run(): experiment.run undefined, proceeding in standard way')
  let names = experiment.names
  let callbacks = experiment.callbacks
  let getScenarios = experiment.getScenarios
  let scenarios = getScenarios(params)
  let wrapUp = isDefined(experiment.wrapUp) ? experiment.wrapUp : identity
  let runsStr = argv.runs
  let runs = (isDefined(runsStr)) ? parseInt(runsStr) : (experiment.runsDefault || 1)
  assert(runs > 0, "runs must be greater than 0")
  let scenarioIDStr = argv.scenario
  if (isDefined(scenarioIDStr)) {
    info('run(): running scenario ' + scenarioIDStr)
    assert(isDefined(argv.experiment), "can't specify scenarioID " +
      "without specifying experimentID!")
    let scenarioID = parseInt(scenarioIDStr)
    assert(scenarioID >= 0 && scenarioID < scenarios.length,
      "passed scenarioID (" + scenarioID + ") is not a valid " +
      "index into scenarios array (see above)")
    let scenario = scenarios.slice(scenarioID, scenarioID + 1)
    let trajectories = simulateScenarios(scenario, makeGame, names, callbacks, runs)
    let result = wrapUp(trajectories, scenario)
    return {
      scenarioID,
      result
    }
  }
  info('run(): simulating all scenarios...')
  let trajectories = simulateScenarios(scenarios, makeGame, names, callbacks, runs)
  let result = wrapUp(trajectories, scenarios)
  return { result }
}

/**
 * Runs all the experiments provided.
 * @param {object[]} experiments
 * @param {function} makeGame
 * @param {object} argv
 * @returns {*}
 */
let runAll = function(experiments, makeGame, argv) {
  return map(function(experiment) {
    return run(experiment, makeGame, argv)
  }, experiments)
}

/**
 * Simulates the execution of a game under a specified scenario, which defines
 * parameters and initial states of agents and parameters of the game.
 * @param {{
 * name: string,
 * options: object,
 * agents: {
 *     params: {
 *          goalCoeffs: number[],
 *          metaParams: {
 *            alpha: number,
 *            discountFactor: number,
 *            lookAhead: number
 *          }
 *        },
 *        initialState: {
 *          belief: object[],
 *          mentalEstimations: object[][],
 *          metaParamsEstimations: {alpha: object[], discountFactor: object[], lookAhead: object[]}
 *        }
 *      }
 * }} scenario
 * @param {object} gameSetup defines specifics of a modeled game
 * @param {string[]} names
 * @param {?{setup: function, periodic: function, final: function}} callbacksOpt*
 * @returns {*[]} the trajectory of this scenario, which takes form of an array
 * of (state, action) pairs. Note that the last pair contains a state and an
 * array of total rewards accumulated by agents throughout execution
 */
let simulateScenario = function (scenario, gameSetup, namesDefault, callbacksOpt) {
  info('simulateScenario() with a scenario ' + scenario.name)
  /** here we're validating user input */
  validateScenario(scenario)
  let options = scenario.options
  explain(emphasiseString("Scenario: " + scenario.name))
  let agentsSetup = scenario.agents
  let names = scenario.names || namesDefault
  printAgentsSetup(agentsSetup, names)
  let game = makeCSMG(gameSetup, options)
  let agents = mapIndexed(function (i, agentSetup) {
    return makeAgent(agentSetup.params, i, agentSetup.initialState, game)
  }, agentsSetup)
  let trajectory = simulate(game, agents, options.horizon, names, options, callbacksOpt, scenario.startingState)
  explain("Sequence of actions computed:")
  explain(map(snd, trajectory.slice(0,-1)))
  return trajectory
}

/**
 * Simulates the execution of a game under provided scenarios.
 * @param {object[]} scenarios see above for format
 * @param {function} getGameSetup
 * @param {?string[]} namesOpt optional names of agents
 * @param {?{setup: function, periodic: function, final: function}} callbacksOpt
 *    (optional) set of functions to be called at the start, at each step and at
 *    the end of executing each scenario. That allows some code, mainly in the
 *    form of informational print statements, to be called as the game executes.
 *    Each function is passed the following arguments:
 *     game, agents, state, names
 * @param {?number} numberOfRunsOpt how many times to run each scenario
 * @returns {*[][]} an array of arrays of trajectories
 * [<scenario 1 trajectories>, <scenario 2 trajectories>, ...]
 */
let simulateScenarios = function (scenarios, getGameSetup, namesOpt, callbacksOpt, numberOfRunsOpt) {
  info('simulateScenarios() called with ' + scenarios.length + ' scenarios.')
  /** First check params passed correctly */
  assertIsArray(scenarios, ANY_TYPE, -1,
    "simulateScenarios(): expected scenarios array, found: " + toString(scenarios))
  assertDefinedNotNull(getGameSetup, "simulateScenarios(): getGameSetup undefined")
  if (scenarios.length == 0) return []
  let nextScenario = scenarios[0]
  let gameSetup = getGameSetup(nextScenario.gameSpecificParams)
  let names = namesOpt || rangeArray(0, gameSetup.params.numberOfAgents)
  let numberOfRuns = numberOfRunsOpt || 1
  let trajectories = repeat(numberOfRuns, function() {
    simulateScenario(nextScenario, gameSetup, names, callbacksOpt)
  })
  let otherTrajectories = simulateScenarios(
    scenarios.slice(1), getGameSetup, names, callbacksOpt, numberOfRunsOpt)
  return [trajectories].concat(otherTrajectories)
}

/**
 * Validates a passed scenario, i.e., makes sure that all the required
 * fields are present and have correct types
 * @param {object} scenario see above for format
 */
let validateScenario = function(scenario) {
  info('validateScenario() with scenario ' + scenario.name)
  assertDefinedNotNull(scenario, "simulateScenario: scenario undefined")

  /** NAME */
  let name = assertDefinedNotNull(scenario.name,
    "simulateScenario: scenario.name undefined")

  let failMsgInto = "simulateScenario() for scenario: " + name + ": "

  /** OPTIONS */
  let options = assertDefinedNotNull(scenario.options,
    failMsgInto + "scenario.options undefined")
  let horizon = assertDefinedNotNull(options.horizon,
    failMsgInto + "options.horizon undefined")
  assertHasType(horizon, INT_TYPE,
    failMsgInto + "options.horizon has wrong type")
  let beliefRep = assertDefinedNotNull(options.beliefRepresentation,
    failMsgInto + "options.beliefRep undefined")
  assertHasType(beliefRep, STRING_TYPE,
    failMsgInto + "options.beliefRep has wrong type")
  assert(beliefRep === "discrete" || beliefRep === 'dirichlet',
    failMsgInto + "beliefRep should be discrete or dirichlet")

  let validateAgent = function(agentSetup, agentID, agentsNumber) {
    let agentFailMsgIntro = "agent " + agentsNumber + ": "

    /** PARAMS */
    let params = assertDefinedNotNull(agentSetup.params,
      agentFailMsgIntro + "params not specified")
    let goalCoeffs = assertDefinedNotNull(params.goalCoeffs,
      agentFailMsgIntro + "goalCoeffs undefined")
    assertIsArray(goalCoeffs, NUMBER_TYPE, -1,
      agentFailMsgIntro + "goalCoeffs not as expected")

    /** METAPARAMS */
    let metaParams = assertDefinedNotNull(params.metaParams,
      agentFailMsgIntro + "meta params undefined")
    let alpha = assertDefinedNotNull(metaParams.alpha,
      agentFailMsgIntro + "alpha undefined")
    assertHasType(alpha, NUMBER_TYPE,
      agentFailMsgIntro + "alpha is not a number!")
    assert(alpha >= 0,
      agentFailMsgIntro + "alpha can't be negative!")
    let discountFactor = assertDefinedNotNull(metaParams.discountFactor,
      agentFailMsgIntro + "discount factor undefined")
    assertHasType(discountFactor, NUMBER_TYPE,
      agentFailMsgIntro + "discount factor is not a number!")
    assert(discountFactor >= 0 && discountFactor <= 1,
      agentFailMsgIntro + "discount factor must be between 0 and 1!")
    let lookAhead = assertDefinedNotNull(metaParams.lookAhead,
      agentFailMsgIntro + "lookahead undefined")
    assertHasType(lookAhead, INT_TYPE,
      agentFailMsgIntro + "lookahead must be an integer!")
    assert(lookAhead >= 0,
      agentFailMsgIntro + "lookahead can't be negative!")

    /** INITIAL STATE */
    let initialState = assertDefinedNotNull(agentSetup.initialState,
      agentFailMsgIntro + "initial state undefined")
    let belief = assertDefinedNotNull(initialState.belief,
      agentFailMsgIntro + "belief undefined")
    assertIsArray(belief, ANY_TYPE, agentsNumber,
      agentFailMsgIntro + "belief must be array indexed by" +
      " agentID, found: " + toString(belief))
    let mentalEstimations = assertDefinedNotNull(initialState.mentalEstimations,
      agentFailMsgIntro + "mental estimations undefined")
    assertIsArray(mentalEstimations, OBJECT_TYPE, agentsNumber,
      agentFailMsgIntro + "mental estimations must be an array " +
      "of distributions indexed by agentID; found: " + toString(mentalEstimations))
    let metaParamsEstimations = assertDefinedNotNull(initialState.metaParamsEstimations,
      agentFailMsgIntro + "metaParamsEstimations undefined")
    let alphaEst = assertDefinedNotNull(metaParamsEstimations.alpha,
      agentFailMsgIntro + "alpha estimations undefined")
    assertIsArray(alphaEst, OBJECT_TYPE, agentsNumber,
      agentFailMsgIntro + "alpha estimations should be an array" +
      " of distributions indexed by agentID; found: " + toString(alphaEst))
    let lookaheadEst = assertDefinedNotNull(metaParamsEstimations.lookAhead,
      agentFailMsgIntro + "lookahead estimations undefined")
    assertIsArray(lookaheadEst, OBJECT_TYPE, agentsNumber,
      agentFailMsgIntro + "lookahead estimations should be an array" +
      " of distributions indexed by agentID; found: " + toString(lookaheadEst))
    let discountFactorEst = assertDefinedNotNull(metaParamsEstimations.discountFactor,
      agentFailMsgIntro + "discount factor estimations undefined")
    assertIsArray(discountFactorEst, OBJECT_TYPE, agentsNumber,
      agentFailMsgIntro + "discount factor estimations should be an array" +
      " of distributions indexed by agentID; found: " + toString(discountFactorEst))
  }

  let validateAgents = function(agentsArr, agentID, agentsNumber) {
    if (agentsArr.length === 0) return
    validateAgent(agentsArr[0], agentID, agentsNumber)
    validateAgents(agentsArr.slice(1), agentID + 1, agentsNumber)
  }
  /** AGENTS */
  let agents = assertDefinedNotNull(scenario.agents,
    failMsgInto + "scenario.agents undefined")
  let noOfAgents = agents.length
  validateAgents(agents, 0, noOfAgents)

  info('validateScenario(): validation successful!')
}


/**
 * Simulate execution of a game played by agents for a number (_horizon_)
 * of steps. Additionally, optional arguments allow one to:
 * - specify a starting state other than initial state
 * - provide functions that will be called at the start
 * of simulation (callbacksOpt.setup) and at every iteration
 * (callbacksOpt.periodic)
 * - namesOpt
 *
 * @param {object} game instance of CSMG created by calling makeCSMG()
 * @param {object[]} agents array of agents, each created by calling makeAgent()
 * @param {number} horizon integer specifying number of steps
 * @param {string[]} names names of agents
 * @param {?object} callbacksOpt optional functions to call during simulation
 * @param {?*} stateOpt optional starting state
 * @returns {*[][]} a trajectory, i.e., an array of [state, action] pairs
 *  with an extra element at the end that is a [state, rewards] pair, where
 *  rewards is an array of rewards accumulated by agents, indexed by agent IDs
 */
let simulate = function(
    game, agents, horizon, names, options, callbacksOpt, stateOpt) {
  assertDefinedNotNull(game.initialState,
    "simulate(): game.initialState undefined")
  let startingState = stateOpt || game.initialState
  explain("Simulation starts.")
  let stateToString = game.API.stateToString
  debug("startingState: " + stateToString(startingState))
  explain("Agents: " + arrayToString(names))
  if (callbacksOpt !== undefined && callbacksOpt.setup !== undefined) {
    let setup = callbacksOpt.setup
    setup(game, agents, startingState, names)
  }
  let traj = trajectory(
      game, startingState, agents, horizon, names, options, callbacksOpt)
  if (callbacksOpt !== undefined && callbacksOpt.final !== undefined) {
    let final = callbacksOpt.final
    let finalState = traj[traj.length - 1][0]
    final(game, agents, finalState, names)
  }
  assert(horizon + 1 === traj.length,
    "simulate(): computed trajectory has unexpected length; " +
    "found: " + traj.length + ", expected: " + (horizon + 1))
  explain("Rewards accumulated by players: " + toString(traj[horizon][1]))
  return traj
}

let scenariosTrajectoriesToScenariosString = function(trajectoriess) {
  if (trajectoriess.length === 1) {
    /** Only one scenario */
    return scenarioTrajectoriesToRunsString(trajectoriess[0])
  }
  let scenariosStrings = mapIndexed(function(i, trajectories) {
    return "Scenario " + i + ": " + scenarioTrajectoriesToRunsString(trajectories)
  }, trajectoriess)
  return scenariosStrings.join("\n")
}

/** scenario might involve one or multiple runs hence cases */
let scenarioTrajectoriesToRunsString = function(trajectories) {
  if (trajectories.length === 1) {
    return trajectoryToActionsString(trajectories[0])
  }
  let stringsArr = mapIndexed(function(i, traj) {
    return "Run " + i + ": " + trajectoryToActionsString(traj)
  }, trajectories)
  return "\n" + stringsArr.join("\n")
}

let trajectoryToActionsString = function(trajectory) {
  return toString(map(snd, trajectory.slice(0,-1)))
}

/**
 * Computes a trajectory, i.e., execution trace, of a game, starting in a given
 * state and executing randomly for a specified number of steps.
 * @param {object} game
 * @param {*} startingState
 * @param {object[]} agents
 * @param {number} timeLeft
 * @param {string[]} names
 * @param {object} options
 * @param {?object} callbacksOpt
 * @returns {*[]} an array of [state,action] pairs except that since game ends
 *    at a state (with no action), last element of the array contains a pair
 *    of [lastState, array of accumulated rewards by players]
 */
let trajectory = function(
    game, startingState, agents, timeLeft, names, options, callbacksOpt) {
  let computeStateRewards = function(state) {
    return map(function(agent) {
      let stateUtility = agent.getStateUtility
      return stateUtility(state)
    }, agents)
  }
  let computeActionRewards = function(state, action) {
    return map(function(agent) {
      let actionUtility = agent.getActionUtility
      return actionUtility(state, action)
    }, agents)
  }
  let trajectoryRec = function(state, timeLeft, accumulatedRewards) {
    let stateRewards = computeStateRewards(state)
    let accumulatedRewards1 = arrayAddElementWise(accumulatedRewards, stateRewards)
    assert(accumulatedRewards.length === stateRewards.length,
      "trajectoryRec(): accumulatedRewards array has different " +
      "size than stateRewards: " + accumulatedRewards.length + " vs " +
    stateRewards.length)
    if (timeLeft > 0) {
      let turn = assertDefinedNotNull(game.API.turn,
        "trajectory(): game.API.turn undefined")
      let actingPlayer = assertDefinedNotNull(agents[turn(state)],
      "trajectory(): failed to compute acting player as element" +
        " at index " + turn(state) + " in array " + toString(agents))
      let name = names[turn(state)]
      explain("+++++++++++++++++++++++++++++++++++++++++++++")
      explain("New iteration. Time left: " + timeLeft + ", " + name + " to act")
      let act = actingPlayer.act
      let start = _.now()
      debug(state)
      let actionDist = act(state)
      let action = sample(actionDist)
      let end = _.now()
      explain("\nAction computed: " + action + ". Took " + (end - start) + " msec")
      explain("+++++++++++++++++++++++++++++++++++++++++++++\n")
      let actionRewards = computeActionRewards(state, action)
      assert(accumulatedRewards.length === actionRewards.length,
        "trajectoryRec(): accumulatedRewards array has different " +
        "size than actionRewards: " + accumulatedRewards.length + " vs " +
        actionRewards.length)
      let transitionFn = game.transitionFn
      let nextState = sample(transitionFn(state, action))
      if (callbacksOpt !== undefined && callbacksOpt.periodic !== undefined) {
        let periodic = callbacksOpt.periodic
        periodic(game, agents, nextState, names)
      }
      let accumulatedRewards2 = arrayAddElementWise(accumulatedRewards1, actionRewards)
      return [[state, action]].concat(trajectoryRec(nextState,timeLeft - 1, accumulatedRewards2))
    }
    return [[state, accumulatedRewards1]]
  }
  let noOfAgents = agents.length
  let accumulatedRewards = repeat(noOfAgents, getConstantFn(0))
  return trajectoryRec(startingState, timeLeft, accumulatedRewards)
}

let printAgentsSetup = function (agents, names) {
  assertEqual(agents.length, names.length,
    "printAgents(): expecting names for all agents and no more")
  if (agents.length === 0) return
  explain("Agent: " + names[0])
  explain("Params: ")
  explain(toString(agents[0].params))
  explain("Initial state: ")
  explain(toString(agents[0].initialState))
  explain("-----------------------------------------")
  printAgentsSetup(agents.slice(1), names.slice(1))
}

/**
 * Constructs the params object of an agent.
 * @param {number[]} goalCoeffs array of numbers between 0 and 1 that sum to 1
 * @param {number} alpha a non negative number
 * @param {number} discountFactor a number between 0 and 1
 * @param {number} lookAhead an integer, typically <10
 * @param {boolean} usesHeuristics
 * @returns {{metaParams: {lookAhead, alpha, discountFactor}, goalCoeffs, usesHeuristics}}
 */
let generateParams = function(goalCoeffs, alpha, discountFactor, lookAhead, usesHeuristics) {
  return {
    /** format [physical goal, mental goal] */
    goalCoeffs,
    metaParams: {
      alpha,
      discountFactor,
      lookAhead
    },
    usesHeuristics
  }
}

/**
 * Constructs an object representing initial state of an agent. Note that
 * belief and mentalEstimations have to be filled in later. The assumption
 * here is that meta-parameters estimations are Dirac distributions and are
 * the same for all agents (most useful when there are two agents).
 * @param {number} agentID
 * @param {number} numberOfAgents
 * @param {number} alphaExp rationality expectation
 * @param {number} discountExp
 * @param {number} lookAheadExp
 * @returns {{
 *   mentalEstimations: object[],
 *   belief: object[],
 *   metaParamsEstimations: {
 *     lookAhead: object[],
 *     alpha: object[],
 *     discountFactor: object[]
 *   }
 * }}
 */
let generateInitialState = function(agentID, numberOfAgents, alphaExp, discountExp, lookAheadExp) {
  let alpha = repeat(numberOfAgents, function() {return Delta({v: alphaExp})})
  let discountFactor = repeat(numberOfAgents, function() {return Delta({v: discountExp})})
  let lookAhead = repeat(numberOfAgents, function() {return Delta({v: lookAheadExp})})
  return {
    belief: repeat(numberOfAgents, getNull),
    mentalEstimations : repeat(numberOfAgents, getNull),
    metaParamsEstimations: {
      alpha: arrayReplace(alpha, agentID, null),
      lookAhead: arrayReplace(lookAhead, agentID, null),
      discountFactor: arrayReplace(discountFactor, agentID, null)
    }
  }
}

/** Run game for *steps* steps, randomly selecting actions.
 * This can be used to validate specification of game mechanics */
let printRandomTrace = function(game, steps) {
  let initialState = game.initialState
  let actionsFn = game.actions
  let transitionFn = game.transitionFn
  let stateToString = game.API.stateToString
  let randomTraceRec = function(curState, remainingSteps) {
    display("state: " + stateToString(curState))
    if (remainingSteps === 0) return
    let actions = actionsFn(curState)
    let action = categorical({vs: actions})
    display("action: " + action)
    let nextState = sample(transitionFn(curState, action))
    return randomTraceRec(nextState, remainingSteps - 1)
  }
  randomTraceRec(initialState, steps)
}

/** auxiliary */
let printInfo = function(experiments) {
  let helpMessage = "\nTo run a selected one, please pass --experiment <experimentID> " +
    "(which is the number preceding experiment name above) " +
    "as command line argument.\n" +
    "This will run all the scenarios defined " +
    "within chosen experiment.\n" +
    "To run a selected scenario, pass --scenario " +
    "<scenarioID>.\n" +
    "To modify the default number of runs, pass --runs " +
    "<numberOfRuns>.\n" +
    "If the experiment you're running requires parameters to be passed," +
    " pass them using --<paramName> <paramValue> syntax where names " +
    "of required params are in the experiment description.\n" +
    "To change the logging level, pass --log <level>. Possible levels " +
    "are 0 to 5 where 0 means no logging and 5 logs almost everything. " +
    "Logs are printed "
  let numberOfExperiments = experiments.length
  display("There are " + numberOfExperiments + " experiments available:")
  mapIndexed(function(index, experiment) {
    let name = assertDefinedNotNull(experiment.name,
      "processCommandline(): experiment.name undefined!")
    let desc = assertDefinedNotNull(experiment.desc,
      "processCommandline(): experiment.desc undefined!")
    display("\n" + index + ": " + name)
    display(desc)
  }, experiments)
  display(helpMessage)
}