/**
 * INFER.WPPL
 *
 * This file contains the scaffold code for running 'inference from
 * data' experiments using webppl-cognitive-agents library.
 *
 * Experiments of this kind can conceptually be divided into several
 * phases:
 * 1. Before anything else, prior belief must be provided (this is
 *    a big data structure)
 * 2. Reading the data file and storing the information in an
 *    appropriate data structure
 * 3. Learning agents' characteristics and state from provided data
 * 4. (Optional) Predicting agents' future behaviour using what was
 *    learned
 *
 * This file provides code to facilitate each of the above phases.
 * The details of inputs/outputs of each phase are provided along
 * with the code for each phase.
 *
 * THE DATA
 * In order to provide useful functions for learning from data,
 * we make certain assumptions on the structure of that data. We
 * expect that the data records one or more *plays* of the given
 * game. Each play features a set of agents, starting in the initial
 * state. Since our focus is on repeated interactions, we subdivide
 * plays into rounds, where each round records a sequence of actions
 * taken by agents in that round. Therefore, each play is represented
 * by a following object:
 * {
 *   agents: <array of agent ids/names>,
 *   rounds: [
 *     <array of actions in round 0>,
 *     <array of actions in round 1>,
 *     ...
 *     <array of actions in round n>
 *   ]
 * }
 * Note that for concurrent games, action is an array.
 *
 * In the future, we would like to extend this to support games where
 * transition function is probabilistic and states need to be passed
 * along with actions to specify a round.
 */

/*******************************
 *  PHASE 1 - DATA PROCESSING  *
 ******************************/

/** OVERVIEW:
 *  In this phase, input file is read and the data is extracted
 *  into an appropriate data structure (details below). Moreover,
 *  a big data structure containing belief over players' characteristics
 *  and state is created. Majority of code for this phase is scenario-
 *  -dependent, but we do provide some defaults for two player case.
 *
 *  We recommend the following format of the data files:
 *  <players line, listing (ID, name) pairs>
 *  <params line, a list of game specific parameters>
 *
 *  <a list of plays, where each play is wrapped into
 *  <start> ... <end> tags and consists of a line specifying
 *  the *agents* participating in the play and a sequence of
 *  *rounds*, where each round is a list of actions taken in that round
 *  >
 *
 *  For example:
 *
 *  (0,bob);(1,alice)
 *
 *  1;4;12;5.6
 *
 *  INPUTS:
 *  - filename that contains the data
 *  - a prior on agents' characteristics and initial states, specified
 *   as an array indexed by agent ID, where each element is as follows:
 *
 *
 *   this big array is further referred to as 'playersDataStructure'
 *
 *  OUTPUT:
 *  - gameSpecificParams
 *  - data, stored as an array of plays (TBC)
 *  - players - an array
 *    {
 *     goalCoeffs: <distribution over goal coeff arrays>,
 *     metaParams: {
 *       alpha: <distribution over non negative reals>,
 *       discountFactor: <distribution over [0,1]>,
 *       lookAhead: <distribution over natural numbers>
 *     },
 *     mentalEstimations: <array indexed by agentID>
 *       [
 *         <array indexed by mental reward index>
 *           [
 *             <distribution over initial estimations (expectations)>
 *           ]
 *       ],
 *     belief: <array indexed by agentID>
 *       [
 *         <distributions over belief, depending on representation used>
 *       ]
 *     }
 */

let getDataFilename = function(path) {
  let filename = argv.data
  // let filename = "test.csv"
  if (filename === undefined) {
    error("Please specify a data file name using -- --data <filename> command line option")
  }
  return ((path.slice(-1) === "/") ? path : path + "/") + filename
}

/**
 *
 * @param agentID number | 0 or 1
 * @param goalCoeffsP | array of goal coeffs arrays
 * @param metaParamsP | a dict containing alpha, discountFactor and
 * lookAhead, each as an array of possible values
 * @param mentalEstimationsP | an array of arrays with possible
 * expectations for each mental state
 * @param beliefP | array of possible dirichlet parameters
 * @returns a distribution over possible setups of an agent
 */
let constructBeliefOverPlayer = function(
  agentID, goalCoeffsP, metaParamsP, mentalEstimationsP, beliefP) {
  info("constructBeliefOverPlayer(): agentID=" + agentID)
  return Infer({method: 'enumerate'}, function() {
    // let goalCoeffs = sample(Categorical({vs: [[1]]}))
    let goalCoeffs = sample(Categorical({vs: goalCoeffsP}))
    let alpha = sample(Categorical({vs: metaParamsP.alpha }))
    let discountFactor = sample(Categorical({vs: metaParamsP.discountFactor }))
    let lookAhead = sample(Categorical({vs: metaParamsP.lookAhead }))
    let f = function(mentalEstimationP) {
      return Delta({v: sample(Categorical({vs: mentalEstimationP}))})
    }
    let mentalEstimations = map(f, mentalEstimationsP)
    let belief = sample(Categorical({vs: beliefP}))
    let tempArray = repeat(2, getUndefined)
    let otherAgentID = otherAgentID(agentID)
    return {
      goalCoeffs,
      metaParams: {
        alpha, discountFactor, lookAhead
      },
      mentalEstimations: arrayReplace(tempArray, otherAgentID, mentalEstimations),
      belief: arrayReplace(tempArray, otherAgentID, belief),
      // these we don't learn for now
      metaParamsEstimations: {
        alpha: arrayReplace(tempArray, otherAgentID, Delta({v: 10})),
        lookAhead: arrayReplace(tempArray, otherAgentID, Delta({v: 2})),
        discountFactor: arrayReplace(tempArray, otherAgentID, Delta({v: 0.9}))
      }
    }
  })
}

let bigBeliefToString = function(bigBelief) {
  let goalCoeffsDist = marginalize(bigBelief, 'goalCoeffs')
  // let goalCoeffsDistAsString = toString(goalCoeffsDist)
  let goalCoeffsDistAsString = "goalCoeffsDist:\n" +
    discreteDistributionToString(goalCoeffsDist, goalCoeffsDist.supp)
  let metaParamsDist = marginalize(bigBelief, 'metaParams')
  let metaParamsStrings = map(function(name) {
    let marginalDist = marginalize(metaParamsDist, name)
    let marginalDistAsString =
      discreteDistributionToString(marginalDist, marginalDist.supp)
    // return name + ": " + toString(marginalDist)
    return name + ": {\n" + marginalDistAsString + "\n}"
  }, metaParamsList)
  let metaParamsString = "metaParams dists:\n" +
    metaParamsStrings.join("\n")
  return goalCoeffsDistAsString + "\n" + metaParamsString
}
/**
 *
 * Expected input format: eg "(0,bob);(1,alice);...;(5,celine)"
 *      (ideally, player ids start from 0 and increment by 1)
 * Transform into array: [[0, 'bob'],[1,'alice'],...,[5,'celine']]
 */
let readPlayersLine = function(line) {
  assert(line.trim().match(/(\(\d,\s*\w+\)\s*;\s*)*\(\d,\s*\w+\)\s*/g),
    "readPlayersLine(): players line in unexpected format; found: " +
    line + "; check for unnecessary whitespaces etc")
  let playerStringToArray = function(string) {
    let array = string.trim().slice(1,-1).split(',')
    return [parseInt(array[0]), array[1].trim()]
  }
  return sort(map(playerStringToArray, line.split(';')))
}

/** Expected input format:
 *  "param1;param2;(...);paramN
 *  where each param is given in decimal notation
 *
 *  returned array has to then be processed by the user
 */
let readParamsArray = function(paramsLine) {
  assert(paramsLine.trim().match(/(\d+(\.\d+)?\s*;\s*)*\d+(\.\d+)?/g),
    "readParamsArray(): params line in unexpected format")
  return map(parseFloat, paramsLine.split(';'))
}

/** readPlays()
 *
 * takes an array of lines that specify plays (each play is assumed
 * to be inside <start> ... <end> tags and consist of a line
 * specifying playerIDs followed by lines specifying rounds
 * where each round is a sequence of actions [delimited by ';']
 * - see more detail above)
 *
 * returns an array of plays, where each play is an object
 * {
 *   agents: <arrays of agentIDs>,
 *   rounds: <array of round>
 * }
 * where each round is an array of actions.
 *
 * In the future, this might change somewhat when passing states
 * is supported.
 */
let readPlays = function(lines, actionProcessors) {
  info("readPlays() called with " + lines.length + " lines")
  // display(lines)
  let processPlaysLine = function(acc, line) {
    info("processPlaysLine(): line=" + line + ", acc=" + toString(acc))
    let plays = acc[0]
    let currentPlay = acc[1]
    if (isUndefined(currentPlay)) {
      assert(_.isEqual(line.trim(), "<start>"),
        "readPlays(): <start> required to start new play, " +
        "found: " + line)
      return [plays, 1]
    }
    if (currentPlay === 1) {
      assert(line.trim().match(/(\d+;)*\d+/g),
        "readPlays(): agent line expected (id1;id2;...), " +
        "found: " + line)
      let agents = map(parseInt, line.split(';'))
      return [plays, { agents }]
    }
    if (_.isEqual(line.trim(), "<end>")) {
      assert(isDefined(currentPlay.rounds),
        "readPlays(): end of play found even though no rounds " +
        "recorded; expected: <end>, found: " + line)
      let updatedPlays = plays.concat([currentPlay])
      return [updatedPlays, undefined]
    }
    /** add this round */
    assert(line.trim().match(/(\w+;)*\w+/g),
      "readPlays(): round data in unexpected format: " + line)
    let actionsRaw = line.trim().split(';')
    let actionsStrings = map(function(actionRaw) {
      return actionRaw.trim()
    }, actionsRaw)
    assert(actionProcessors.length === actionsStrings.length,
      "readPlays(): expected the number of action processors " +
      "to be the same as the number of actions in a round, but found " +
      actionProcessors.length + " action processors and " +
      actionsStrings.length + " actions in a round")
    let actions = map2(function(actionProcessor, action) {
      return actionProcessor(action)
    }, actionProcessors, actionsStrings)
    let roundsSoFar = currentPlay.rounds
    if (isUndefined(roundsSoFar)) {
      return [plays, extend(currentPlay, { rounds: [actions]})]
    }
    return [plays, extend(currentPlay, { rounds: roundsSoFar.concat([actions]) }) ]
  }
  let finalAcc = reduceL(processPlaysLine, [[], undefined], lines)
  return finalAcc[0]
}

let getRelevantLines = function(filename) {
  /** Read the file and filter out any irrelevant lines
   * (comments starting with %, empty lines) */
  let allLines = fs.read(filename).split('\n')
  let isRelevant = function(line) { return !line.startsWith('%') && line.length > 0}
  let lines = filter(isRelevant, allLines)
  return lines
}

/************************
 *  PHASE 2 - LEARNING  *
 ***********************/

/** OVERVIEW:
 *  In this phase, a game structure will be created using parameters
 *  retrieved from the input file. Then, the data will be processed
 *  and posterior on agents computed.
 *
 *  INPUTS (= OUTPUTS from phase 1):
 *  - gameSpecificParams
 *  - data, stored as an array of plays (detail above)
 *  - players - an array
 *
 *  OUTPUT:
 *  - updatedPlayers - an array in the same format, but beliefs are
 *    (supposed to be) more accurate
 */

/** data is an array of plays,
 * csmg is the game structure
 * playersPrior is array of distributions */
let processData = function(data, csmg, playersPrior) {
  info("processData()")
  assertDefinedNotNull(data, "processData(): data undefined")
  assertDefinedNotNull(csmg, "processData(): csmg undefined")
  assertDefinedNotNull(playersPrior, "processData(): playersPrior undefined")
  let turn = csmg.API.turn
  let actionSimilarity = csmg.API.actionSimilarity
  let transitionFn = csmg.transitionFn
  /** Params
   *
   * @param playersDataStructure
   * @param play | consists of agents participating + actions taken:
   *  {
   *    agents: <array of agentIDs>,
   *    rounds: <array (sequence) of rounds>
   *      each round = seq of actions + (optionally) states
   *  }
   * @returns updated players data structure
   */
  let processOnePlay = function(playersDataStructure, play) {
    info("processOnePlay(): play=" + toString(play))
    assertDefinedNotNull(playersDataStructure,
      "processOnePlay(): playersDataStructure undefined")
    assertDefinedNotNull(play, "processOnePlay(): play undefined")
    let agentIDs = play.agents
    explain("Processing a play involving agents: "
      + arrayToString(agentIDs))
    explain("Prior beliefs:")
    map(function(agentID) {
      explain("Over agent " + agentID + ":\n" +
        bigBeliefToString(playersDataStructure[agentID]))
    }, agentIDs)
    assertEqual(csmg.params.numberOfAgents, agentIDs.length,
      "processOnePlay(): size of agentIDs array doesn't match " +
      "number of agents in the game!")

    /** roundData = { states: <>, actions: <>} */
    let processRound = function(prior, roundData) {
      info("processRound(): roundData=" + toString(roundData))
      assertDefinedNotNull(prior, "processRound(): prior undefined")
      assertDefinedNotNull(roundData, "processRound(): actions undefined")

      let states = assertDefinedNotNull(roundData.states,
        "processRound(): states undefined")
      let actions = assertDefinedNotNull(roundData.actions,
        "processRound(): actions undefined")
      assert(states.length === actions.length + 1,
        "processRound(): there should be one more state than" +
        " actions; found: " + states.length + " states, " +
        actions.length + " actions")
      let stateActionPairs = map2(function(state, action) {
        return {state, action}
      }, states.slice(0,-1), actions)

      explain("Process round of actions " +
        arrayToString(actions) + " at states " +
        arrayToString(states.slice(0,-1)))

      let processAction = function(prior, stateAction) {
        assertDefinedNotNull(prior, "processAction(): prior undefined")
        assertDefinedNotNull(stateAction, "processAction(): stateAction undefined")
        info("processAction(): stateAction=" + toString(stateAction))
        let state = assertDefinedNotNull(stateAction.state,
          "processAction(): state undefined")
        let observedAction = assertDefinedNotNull(stateAction.action,
          "processAction(): action undefined")
        let turn = turn(state)
        let actingAgentID = agentIDs[turn]

        explain("Learn from action " + observedAction + " by " +
          "agent " + turn)

        /** IMPORTANT: here is where the inference happens */
        let agentPosterior = Infer({method: 'enumerate'}, function() {
          let agentSetup = sample(prior[actingAgentID])
          let agentParams = {
            goalCoeffs: agentSetup.goalCoeffs,
            metaParams: agentSetup.metaParams
          }
          let agentInitialState = {
            belief: agentSetup.belief,
            mentalEstimations: agentSetup.mentalEstimations,
            metaParamsEstimations: agentSetup.metaParamsEstimations
          }
          info("make agent id=" + actingAgentID + ", with params:")
          info(agentParams)
          info("and initial state:")
          info(agentInitialState)
          let agent = makeAgent(agentParams, actingAgentID, agentInitialState, csmg)
          let act = agent.act
          let computedAction = sample(act(state))
          factor(actionSimilarity(state, computedAction, observedAction))
          return agentSetup
        })

        return arrayReplace(prior, actingAgentID, agentPosterior)
      }

      let posterior = reduceL(processAction, prior, stateActionPairs)
      // explain("Processed round of " + toString(actions))
      // explain("Updated belief over agents:")
      // map(function(agentID) {
      //   explain("Over agent " + agentID + ":\n" +
      //     bigBeliefToString(posterior[agentID]))
      // }, agentIDs)
      return posterior
    }

    if (play.length == 0) {
      return playersDataStructure
    }

    /** in case states were not provided, fill them in */
    let rounds = function() {
      let optionallyExtend = function(acc, round) {
        let currentState = acc[0]
        let extendedRounds = acc[1]
        if (round.states !== undefined) {
          return [round.states[round.states.length - 1],
            extendedRounds.concat([round])]
        }
        let f = function(statesArr, action) {
          let prevState = statesArr[statesArr.length - 1]
          let nextState = sample(transitionFn(prevState, action))
          return statesArr.concat([nextState])
        }
        let states = reduceL(f, [currentState], round)
        let finalState = states[states.length - 1]
        let extendedRound = {
          actions: round,
          states
        }
        return [finalState, extendedRounds.concat([extendedRound])]
      }
      let result = reduceL(optionallyExtend,
        [csmg.initialState,[]], play.rounds)
      return result[1]
    }()
    /** rounds in an array of round;
     *  each round is an object {
     *    states: <array of states>,
     *    actions: <array of actions>
     *  }
     *  except that states may be skipped if obvious */

    let posterior = reduceL(processRound, playersDataStructure, rounds)
    explain("Processed the play")
    explain("Updated belief over agents:")
    map(function(agentID) {
      explain("Over agent " + agentID + ":\n" +
        bigBeliefToString(posterior[agentID]))
    }, agentIDs)
    return posterior
  }
  return reduceL(processOnePlay, playersPrior, data)
}

/**************************
 *  PHASE 3 - PREDICTION  *
 *************************/

let getPredictFilename = function(path) {
  // let filename = argv.predict
  let filename = "test.csv"
  if (filename === undefined) {
    error("Please specify a predict file name using --predict <filename> command line")
  }
  if (filename.includes("/")) {
    return filename
  }
  return ((path.slice(-1) === "/") ? path : path + "/") + filename
}

